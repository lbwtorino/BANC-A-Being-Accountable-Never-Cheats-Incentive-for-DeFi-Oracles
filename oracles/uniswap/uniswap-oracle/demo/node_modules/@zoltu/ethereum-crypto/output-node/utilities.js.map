{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../source/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["export function validateByteArray(message: Iterable<number>): void {\n\tfor (const maybeByte of message) {\n\t\tif (maybeByte >= 2**8) throw new Error(`Expected a byte array but received an array with elements larger than 2**8`)\n\t\tif (maybeByte < 0) throw new Error(`Expected byte array but received an array with negative elements`)\n\t}\n}\n\nexport function chunkArray<T, L extends number>(array: Array<T>, chunkSize: L): Array<Array<T> & {length:L}> {\n\tconst chunks = new Array<Array<T> & {length:L}>()\n\tfor (let i = 0; i < array.length; i += chunkSize) {\n\t\tconst chunk = array.slice(i, i + chunkSize) as Array<T> & {length:L}\n\t\tchunks.push(chunk)\n\t}\n\treturn chunks\n}\n\nexport function bytesToBigint<L extends number>(array: ArrayLike<number> & {length:L}): bigint {\n\tlet result = 0n\n\tfor (let i = 0; i < array.length; ++i) {\n\t\tconst shiftAmount = BigInt((array.length - 1 - i) * 8)\n\t\tconst byte = BigInt(array[i])\n\t\tresult |= byte << shiftAmount\n\t}\n\treturn result\n}\n\nexport function bigintToBytes<L extends number>(value: bigint, numberOfBytes: L): Uint8Array & {length:L} {\n\tif (value >= 2n**BigInt(numberOfBytes * 8)) throw new Error(`Cannot encode ${value} in ${numberOfBytes} bytes.`)\n\tif (value < 0) throw new Error(`This function cannot encode a negative number (${value}).`)\n\tconst result = new Uint8Array(numberOfBytes)\n\tfor (let i = 0; i < numberOfBytes; ++i) {\n\t\tconst shiftAmount = BigInt((numberOfBytes - 1 - i) * 8)\n\t\tconst byte = Number((value >> shiftAmount) & 0xffn)\n\t\tresult[i] = byte\n\t}\n\treturn result as Uint8Array & {length:L}\n}\n\nexport function rightCircularShift64(value: bigint, bits: bigint): bigint {\n\tvalue = value % 2n**64n\n\tbits = bits % 64n\n\tconst newSignificantBits = (value << (64n - bits)) % 2n**64n\n\tconst newInsignificantBits = value >> bits\n\treturn newSignificantBits | newInsignificantBits\n}\n\nexport function leftCircularShift64(value: bigint, bits: bigint): bigint {\n\tvalue = value % 2n**64n\n\tbits = bits % 64n\n\tconst newSignificantBits = (value << bits) % 2n**64n\n\tconst newInsignificantBits = value >> (64n - bits)\n\treturn newSignificantBits | newInsignificantBits\n}\n\nexport function modularSubtract(minuend: bigint, subtrahend: bigint, fieldModulus: bigint): bigint {\n\tconst difference = (minuend - subtrahend) % fieldModulus\n\treturn (difference >= 0) ? difference : difference + fieldModulus\n}\n\nexport function modularDivide(dividend: bigint, divisor: bigint, fieldModulus: bigint): bigint {\n\treturn dividend * modularMultiplicitiveInverse(divisor, fieldModulus) % fieldModulus\n}\n\nexport function modularMultiplicitiveInverse(base: bigint, fieldModulus: bigint): bigint {\n\tlet power = fieldModulus - 2n\n\tlet result = 1n\n\twhile (power > 0n) {\n\t\tif (power % 2n) {\n\t\t\tresult *= base\n\t\t\tresult %= fieldModulus\n\t\t}\n\t\tpower /= 2n\n\t\tbase *= base\n\t\tbase %= fieldModulus\n\t}\n\treturn result\n}\n\nexport function getFirstBits(data: Uint8Array, numberOfBits: number): Array<boolean> {\n\tif (numberOfBits > 32) throw new Error(`Can only strip off up to the first 32 bits.`)\n\tconst result = new Array<boolean>()\n\tfor (let i = 0; i < numberOfBits; ++i) {\n\t\tresult.push(getBit(data[Math.floor(i / 8)], i % 8))\n\t}\n\treturn result\n}\n\nexport function toBitArray(data: Uint8Array): Array<boolean> {\n\tconst result = new Array<boolean>()\n\tfor (let byte of data) {\n\t\tfor (let i = 0; i < 8; ++i) {\n\t\t\tresult.push(getBit(byte, i))\n\t\t}\n\t}\n\treturn result\n}\n\nexport function getBit(data: number, offset: number): boolean {\n\tif (data >= 2**8) throw new Error(`Only supports 8-bit numbers`)\n\treturn !!((data >>> (8 - offset - 1)) & 0b1)\n}\n\nexport function bitArrayToNumber(data: Array<boolean>): number {\n\tlet result = 0\n\tfor (let i = 0; i < data.length; ++i) {\n\t\tresult = result ^ Number(data[i]) << (data.length - i - 1)\n\t}\n\treturn result\n}\n"]}