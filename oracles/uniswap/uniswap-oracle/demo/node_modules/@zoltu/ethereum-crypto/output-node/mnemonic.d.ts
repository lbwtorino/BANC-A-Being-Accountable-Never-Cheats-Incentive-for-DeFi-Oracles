/**
 * Get the reason why a set of words is not a valid mnemonic string.  Useful for when you want to check a set of words without spending too much resources on doing seed generation (which is very CPU intensive).
 *
 * @param words Mnemonic as a space seperated string or an array of words
 * @returns A reason string for why the mnemonic is invalid, or null if the mnemonic is valid
 */
export declare function getErrorReason(words: string | string[]): Promise<string | null>;
/**
 * Turns a string of BIP39 compliant mnemonic words plus a passphrase into a seed that can be used with BIP32 or similar key derivation systems.
 *
 * @param words The mnemonic words as per BIP39.  If a string is provided, it is split on spaces.  There must be 12, 15, 18, 21, or 24 words and they must be from the englishWordList.
 * @param passphrase An optional passphrase to salt the words with.  If not provided, the empty string passphrase will be used.
 * @returns A seed for usage in BIP32 (or similar) key derivation systems, such as used by `hdWallet.privateKeyFromSeed`
 */
export declare function toSeed(words: Array<string> | string, passphrase?: string): Promise<bigint>;
/**
 * Generates a random mnemonic phrase using browser's cryptographic random number generator.
 *
 * @param entropyLengthInBits Amount of entropy, in bits.
 */
export declare function generateRandom(entropyLengthInBits: 128 | 160 | 192 | 224 | 256): Promise<Array<string>>;
/**
 * Generates a deterministic mnemonic phrase from the provided entropy.  Only use if you have some external source of randomness that is superior to the browser's cryptographic random number generator.
 *
 * @param entropy A byte array of entropy.  Must be between 16 and 32 bytes and be a multiple of 4 bytes long.
 */
export declare function generateFromEntropy(entropy: Uint8Array): Promise<Array<string>>;
export declare function toEntropy(/*words*/ _: string | Array<string>): Uint8Array;
