export declare function validateByteArray(message: Iterable<number>): void;
export declare function chunkArray<T, L extends number>(array: Array<T>, chunkSize: L): Array<Array<T> & {
    length: L;
}>;
export declare function bytesToBigint<L extends number>(array: ArrayLike<number> & {
    length: L;
}): bigint;
export declare function bigintToBytes<L extends number>(value: bigint, numberOfBytes: L): Uint8Array & {
    length: L;
};
export declare function rightCircularShift64(value: bigint, bits: bigint): bigint;
export declare function leftCircularShift64(value: bigint, bits: bigint): bigint;
export declare function modularSubtract(minuend: bigint, subtrahend: bigint, fieldModulus: bigint): bigint;
export declare function modularDivide(dividend: bigint, divisor: bigint, fieldModulus: bigint): bigint;
export declare function modularMultiplicitiveInverse(base: bigint, fieldModulus: bigint): bigint;
export declare function getFirstBits(data: Uint8Array, numberOfBits: number): Array<boolean>;
export declare function toBitArray(data: Uint8Array): Array<boolean>;
export declare function getBit(data: number, offset: number): boolean;
export declare function bitArrayToNumber(data: Array<boolean>): number;
