{"version":3,"file":"keccak256.js","sourceRoot":"","sources":["../source/keccak256.ts"],"names":[],"mappings":"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","sourcesContent":["import { leftCircularShift64, validateByteArray } from './utilities';\n\nconst roundConstants = [\n\t0x0000000000000001n, 0x0000000000008082n, 0x800000000000808An, 0x8000000080008000n, 0x000000000000808Bn, 0x0000000080000001n, 0x8000000080008081n, 0x8000000000008009n, 0x000000000000008An, 0x0000000000000088n, 0x0000000080008009n, 0x000000008000000An, 0x000000008000808Bn, 0x800000000000008Bn, 0x8000000000008089n, 0x8000000000008003n, 0x8000000000008002n, 0x8000000000000080n, 0x000000000000800An, 0x800000008000000An, 0x8000000080008081n, 0x8000000000008080n, 0x0000000080000001n, 0x8000000080008008n\n]\n\nconst rotationOffests = [\n\t[0n, 36n, 3n, 41n, 18n],\n\t[1n, 44n, 10n, 45n, 2n],\n\t[62n, 6n, 43n, 15n, 61n],\n\t[28n, 55n, 25n, 21n, 56n],\n\t[27n, 20n, 39n, 8n, 14n],\n]\n\nfunction round(state: bigint[][], roundConstant: bigint): void {\n\t// θ step\n\tconst tempC: bigint[] = []\n\tfor (let x = 0; x < 5; ++x) {\n\t\ttempC[x] = state[x][0] ^ state[x][1] ^ state[x][2] ^ state[x][3] ^ state[x][4]\n\t}\n\tconst tempD: bigint[] = []\n\tfor (let x = 0; x < 5; ++x) {\n\t\ttempD[x] = tempC[(x+4) % 5] ^ leftCircularShift64(tempC[(x+1) % 5], 1n)\n\t}\n\tfor (let x = 0; x < 5; ++x) {\n\t\tfor (let y = 0; y < 5; ++y) {\n\t\t\tstate[x][y] ^= tempD[x]\n\t\t}\n\t}\n\n\t// ρ and π steps\n\tconst tempB: bigint[][] = [[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n]]\n\tfor (let x = 0; x < 5; ++x) {\n\t\tfor (let y = 0; y < 5; ++y) {\n\t\t\ttempB[y][(2*x + 3*y) % 5] = leftCircularShift64(state[x][y], rotationOffests[x][y])\n\t\t}\n\t}\n\n\t// χ step\n\tfor (let x = 0; x < 5; ++x) {\n\t\tfor (let y = 0; y < 5; ++y) {\n\t\t\tstate[x][y] = tempB[x][y] ^ ((~tempB[(x+1) % 5][y]) & tempB[(x+2) % 5][y])\n\t\t}\n\t}\n\n\t// ι step\n\tstate[0][0] ^= roundConstant\n}\n\nfunction permute(state: bigint[][]): void {\n\tfor (const roundConstant of roundConstants) {\n\t\tround(state, roundConstant)\n\t}\n}\n\nexport async function hash(message: Iterable<number> & {length:number}): Promise<bigint> {\n\tvalidateByteArray(message)\n\n\t// padding\n\tconst paddingLength = 136 - (message.length % 136)\n\tconst padding = new Array(paddingLength).fill(0)\n\tpadding[0] = 0x01\n\tconst paddedMessage = new Uint8Array([...message, ...padding])\n\tpaddedMessage[paddedMessage.length - 1] |= 0x80\n\n\t// initialization\n\tconst state: bigint[][] = [[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n]]\n\tfor (let x = 0; x < 5; ++x) {\n\t\tfor (let y = 0; y < 5; ++y) {\n\t\t\tstate[x][y] = 0n\n\t\t}\n\t}\n\n\t// absorbing phase\n\tfor (let i = 0; i < paddedMessage.length; i += 136) {\n\t\tconst messageChunk = new DataView(paddedMessage.buffer, i, 136)\n\t\tfor (let j = 0; j < 17; ++j) {\n\t\t\tconst x = j % 5\n\t\t\tconst y = Math.floor(j / 5)\n\t\t\tstate[x][y] ^= messageChunk.getBigUint64(j * 8, true)\n\t\t}\n\t\tpermute(state)\n\t}\n\n\t// squeezing phase\n\tconst result = new Uint8Array(32) as Uint8Array & {length:32}\n\tconst resultView = new DataView(result.buffer)\n\tresultView.setBigInt64(0, state[0][0], true)\n\tresultView.setBigInt64(8, state[1][0], true)\n\tresultView.setBigInt64(16, state[2][0], true)\n\tresultView.setBigInt64(24, state[3][0], true)\n\n\t// this keccak256 implementation follows the reference implementation which assumes little endian, including its constants and how it converts the input byte array.  This means that the values in our state array are all byte-order swapped.  The keccak algorithm doesn't actually care what the numbers are, so it still works as long as we flip the byte order around on the way out.\n\t// TODO: figure out how to convert this implementation to use big endian.  Requires changing `messageChunk.getBigUint64(..., false)`, removing the endian swap here, swapping all of the round constants, and figuring out what to do with the padding.\n\treturn endianSwap64(state[0][0]) << 192n ^ endianSwap64(state[1][0]) << 128n ^ endianSwap64(state[2][0]) << 64n ^ endianSwap64(state[3][0])\n}\n\nfunction endianSwap64(value: bigint): bigint {\n\treturn ((value & 0x00000000000000ffn) << 56n)\n\t\t^ ((value & 0x000000000000ff00n) << 40n)\n\t\t^ ((value & 0x0000000000ff0000n) << 24n)\n\t\t^ ((value & 0x00000000ff000000n) << 8n)\n\t\t^ ((value & 0x000000ff00000000n) >> 8n)\n\t\t^ ((value & 0x0000ff0000000000n) >> 24n)\n\t\t^ ((value & 0x00ff000000000000n) >> 40n)\n\t\t^ ((value & 0xff00000000000000n) >> 56n)\n}\n"]}