"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Bytes extends Uint8Array {
    constructor() {
        super(...arguments);
        this.toString = () => this.reduce((result, byte) => result + ('0' + byte.toString(16)).slice(-2), '');
        this.to0xString = () => wireEncodeByteArray(this);
        this.toUnsignedBigint = () => {
            let value = 0n;
            for (let byte of this) {
                value = (value << 8n) + BigInt(byte);
            }
            return value;
        };
        this.toSignedBigint = () => {
            const unsignedValue = this.toUnsignedBigint();
            return Bytes.twosComplement(unsignedValue, this.length * 8);
        };
        this.equals = (other) => {
            if (other === undefined || other === null)
                return false;
            if (this.length !== other.length)
                return false;
            for (let i = 0; i < this.length; ++i) {
                if (this[i] !== other[i])
                    return false;
            }
            return true;
        };
    }
    static fromByteArray(bytes, pad = 'right') {
        const result = new this(bytes.length);
        if (bytes.length > result.length)
            throw new Error(`Source bytes are longer (${bytes.length}) than destination bytes (${result.length})\n${bytes}`);
        for (let i = 0; i < bytes.length; ++i) {
            const byte = bytes[i];
            if (byte > 0xff || byte < 0)
                throw new Error(`Source array must only include numbers between 0 and ${0xff}.\n${bytes}`);
        }
        result.set(bytes, (pad === 'left') ? result.length - bytes.length : 0);
        return result;
    }
    static fromHexString(hex, pad) {
        const match = /^(?:0x)?([a-fA-F0-9]*)$/.exec(hex);
        if (match === null)
            throw new Error(`Expected a hex string encoded byte array with an optional '0x' prefix but received ${hex}`);
        const normalized = match[1];
        if (normalized.length % 2)
            throw new Error(`Hex string encoded byte array must be an even number of charcaters long.`);
        const bytes = [];
        for (let i = 0; i < normalized.length; i += 2) {
            bytes.push(Number.parseInt(`${normalized[i]}${normalized[i + 1]}`, 16));
        }
        return this.fromByteArray(bytes, pad);
    }
    static fromStringLiteral(literal, pad32 = 'none') {
        const encoded = new TextEncoder().encode(literal);
        const padding = new Uint8Array((32 - encoded.length % 32) % 32);
        switch (pad32) {
            case 'none':
                return this.fromByteArray(encoded);
            case 'left':
                return this.fromByteArray([...padding, ...encoded]);
            case 'right':
                return this.fromByteArray([...encoded, ...padding]);
            default:
                throw new Error(`Invalid 'pad32' parameter: ${pad32}.`);
        }
    }
    static fromUnsignedInteger(value, numberOfBits) {
        if (numberOfBits % 8)
            throw new Error(`numberOfBits must be a multiple of 8.`);
        if (typeof value === 'number')
            value = BigInt(value);
        if (value >= 2n ** BigInt(numberOfBits) || value < 0n)
            throw new Error(`Cannot fit ${value} into a ${numberOfBits}-bit unsigned integer.`);
        const numberOfBytes = numberOfBits / 8;
        const result = new this(numberOfBytes);
        if (result.length !== numberOfBytes)
            throw new Error(`Cannot a ${numberOfBits} value into a ${result.length} byte array.`);
        for (let i = 0; i < result.length; ++i) {
            result[i] = Number((value >> BigInt(numberOfBits - i * 8 - 8)) & 0xffn);
        }
        return result;
    }
    static fromSignedInteger(value, numberOfBits) {
        if (typeof value === 'number')
            value = BigInt(value);
        if (value >= 2n ** BigInt(numberOfBits - 1) || value < -(2n ** BigInt(numberOfBits - 1)))
            throw new Error(`Cannot fit ${value} into a ${numberOfBits}-bit signed integer.`);
        const unsignedValue = this.twosComplement(value, numberOfBits);
        return this.fromUnsignedInteger(unsignedValue, numberOfBits);
    }
    // this is important TypeScript magic whose provenance and purpose has been lost to time
    static get [Symbol.species]() { return Uint8Array; }
    static twosComplement(value, numberOfBits) {
        const mask = 2n ** (BigInt(numberOfBits) - 1n) - 1n;
        return (value & mask) - (value & ~mask);
    }
}
exports.Bytes = Bytes;
class Log {
    constructor(raw) {
        this.blockHash = BigInt(raw.blockHash);
        this.blockNumber = BigInt(raw.blockNumber);
        this.transactionHash = BigInt(raw.transactionHash);
        this.transactionIndex = BigInt(raw.transactionIndex);
        this.logIndex = BigInt(raw.logIndex);
        this.address = BigInt(raw.address);
        this.topics = raw.topics.map(x => BigInt(x));
        this.data = Bytes.fromHexString(raw.data);
    }
}
exports.Log = Log;
class TransactionReceipt {
    constructor(raw) {
        this.blockHash = BigInt(raw.blockHash);
        this.blockNumber = BigInt(raw.blockNumber);
        this.hash = BigInt(raw.transactionHash);
        this.index = BigInt(raw.transactionIndex);
        this.from = BigInt(raw.from);
        this.to = (raw.to) ? BigInt(raw.to) : null;
        this.contractAddress = (raw.contractAddress) ? BigInt(raw.contractAddress) : null;
        this.cumulativeGasUsed = BigInt(raw.cumulativeGasUsed);
        this.gasUsed = BigInt(raw.gasUsed);
        this.logs = raw.logs.map(x => new Log(x));
        this.logsBloom = BigInt(raw.logsBloom);
        this.status = !!Number.parseInt(raw.status, 16);
    }
}
exports.TransactionReceipt = TransactionReceipt;
class Transaction {
    constructor(raw) {
        this.blockHash = (raw.blockHash !== null) ? BigInt(raw.blockHash) : null;
        this.blockNumber = (raw.blockNumber !== null) ? BigInt(raw.blockNumber) : null;
        this.hash = BigInt(raw.hash);
        this.index = (raw.transactionIndex !== null) ? BigInt(raw.transactionIndex) : null;
        this.from = BigInt(raw.from);
        this.to = (raw.to !== null) ? BigInt(raw.to) : null;
        this.value = BigInt(raw.value);
        this.data = Bytes.fromHexString(raw.input);
        this.nonce = BigInt(raw.nonce);
        this.gas = BigInt(raw.gas);
        this.gasPrice = BigInt(raw.gasPrice);
        this.r = BigInt(raw.r);
        this.s = BigInt(raw.s);
        this.v = BigInt(raw.v);
    }
}
exports.Transaction = Transaction;
class Block {
    constructor(raw) {
        this.hash = (raw.hash !== null) ? BigInt(raw.hash) : null;
        this.number = (raw.number !== null && raw.number) ? BigInt(raw.number) : null;
        this.nonce = (raw.nonce !== null && raw.nonce !== undefined) ? BigInt(raw.nonce) : null;
        this.logsBloom = (raw.logsBloom !== null) ? BigInt(raw.logsBloom) : null;
        this.parentHash = BigInt(raw.parentHash);
        this.sha3Uncles = BigInt(raw.sha3Uncles);
        this.transactionsRoot = BigInt(raw.transactionsRoot);
        this.stateRoot = BigInt(raw.stateRoot);
        this.receiptsRoot = BigInt(raw.receiptsRoot);
        this.miner = BigInt(raw.miner);
        this.difficulty = BigInt(raw.difficulty);
        this.totalDifficulty = BigInt(raw.totalDifficulty);
        this.extraData = Bytes.fromHexString(raw.extraData);
        this.size = BigInt(raw.size);
        this.gasLimit = BigInt(raw.gasLimit);
        this.gasUsed = BigInt(raw.gasUsed);
        this.timestamp = new Date(Number.parseInt(raw.timestamp) * 1000);
        this.mixHash = (raw.mixHash !== undefined) ? BigInt(raw.mixHash) : null;
        this.transactions = raw.transactions.map(x => (typeof x === 'string') ? BigInt(x) : new Transaction(x));
        this.uncles = raw.uncles.map(x => BigInt(x));
    }
}
exports.Block = Block;
class MerklePatritiaProof {
    constructor(raw) {
        this.balance = BigInt(raw.balance);
        this.codeHash = BigInt(raw.codeHash);
        this.nonce = BigInt(raw.nonce);
        this.storageHash = BigInt(raw.storageHash);
        this.accountProof = raw.accountProof.map(x => Bytes.fromHexString(x));
        this.storageProof = raw.storageProof.map(x => ({
            key: BigInt(x.key),
            value: BigInt(x.value || '0x0'),
            proof: x.proof.map(y => Bytes.fromHexString(y)),
        }));
    }
}
exports.MerklePatritiaProof = MerklePatritiaProof;
class SignedTransaction {
    constructor(raw) {
        this.from = BigInt(raw.from);
        this.to = (raw.to !== null) ? BigInt(raw.to) : null;
        this.value = BigInt(raw.value);
        this.data = Bytes.fromHexString(raw.input);
        this.nonce = BigInt(raw.nonce);
        this.gasLimit = BigInt(raw.gas);
        this.gasPrice = BigInt(raw.gasPrice);
        this.r = BigInt(raw.r);
        this.s = BigInt(raw.s);
        this.v = BigInt(raw.v);
    }
}
exports.SignedTransaction = SignedTransaction;
function wireEncodeByteArray(bytes) {
    let result = '';
    for (let i = 0; i < bytes.length; ++i) {
        result += ('0' + bytes[i].toString(16)).slice(-2);
    }
    return `0x${result}`;
}
exports.wireEncodeByteArray = wireEncodeByteArray;
function wireEncodeNumber(value, padding = 0) {
    if (value < 0)
        throw new Error(`Wire encoded values must be positive.  Received: ${value}`);
    if (typeof value === 'number' && value > 2 ** 52)
        throw new Error(`Wire encoded number values cannot be bigger than ${2 ** 52}.  Received: ${value}`);
    if (typeof value === 'bigint' && value >= 2 ** 256)
        throw new Error(`Wire encoded bigint values must be smaller than ${2n ** 256n}.  Received: ${value}`);
    return `0x${value.toString(16).padStart(padding, '0')}`;
}
exports.wireEncodeNumber = wireEncodeNumber;
function wireEncodeBlockTag(tag) { return (typeof tag === 'string') ? tag : wireEncodeNumber(tag); }
exports.wireEncodeBlockTag = wireEncodeBlockTag;
function wireEncodeOffChainTransaction(transaction) {
    return {
        from: wireEncodeNumber(transaction.from, 40),
        to: transaction.to ? wireEncodeNumber(transaction.to, 40) : null,
        value: wireEncodeNumber(transaction.value),
        data: wireEncodeByteArray(transaction.data),
        gas: transaction.gasLimit ? wireEncodeNumber(transaction.gasLimit) : null,
        gasPrice: wireEncodeNumber(transaction.gasPrice),
    };
}
exports.wireEncodeOffChainTransaction = wireEncodeOffChainTransaction;
function wireEncodeOnChainTransaction(transaction) {
    return {
        ...wireEncodeOffChainTransaction(transaction),
        nonce: wireEncodeNumber(transaction.nonce),
    };
}
exports.wireEncodeOnChainTransaction = wireEncodeOnChainTransaction;
function validateJsonRpcResponse(response) {
    if (response.jsonrpc !== '2.0'
        || (typeof response.id !== 'string' && typeof response.id !== 'number' && response.id !== null)
        || ('result' in response && 'error' in response)
        || (!('result' in response) && !('error' in response))
        || (response.error && typeof response.error.code !== 'number')
        || (response.error && typeof response.error.message !== 'string'))
        throw new Error(`Expected JSON-RPC response, received something else.\n${JSON.stringify(response)}`);
    return true;
}
exports.validateJsonRpcResponse = validateJsonRpcResponse;
function isJsonRpcSuccess(response) {
    return !!response.result && !response.error;
}
exports.isJsonRpcSuccess = isJsonRpcSuccess;
function isJsonRpcError(response) {
    return !!response.error && !response.result;
}
exports.isJsonRpcError = isJsonRpcError;
var Rpc;
(function (Rpc) {
    let Eth;
    (function (Eth) {
        let Accounts;
        (function (Accounts) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_accounts',
                    });
                }
            }
            Accounts.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = raw.result.map(x => BigInt(x));
                }
            }
            Accounts.Response = Response;
        })(Accounts = Eth.Accounts || (Eth.Accounts = {}));
        let BlockNumber;
        (function (BlockNumber) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_blockNumber',
                    });
                }
            }
            BlockNumber.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            BlockNumber.Response = Response;
        })(BlockNumber = Eth.BlockNumber || (Eth.BlockNumber = {}));
        let Call;
        (function (Call) {
            class Request {
                constructor(id, transaction, blockTag = 'latest') {
                    this.id = id;
                    this.transaction = transaction;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_call',
                        params: [wireEncodeOffChainTransaction(this.transaction), wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            Call.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = Bytes.fromHexString(raw.result);
                }
            }
            Call.Response = Response;
        })(Call = Eth.Call || (Eth.Call = {}));
        let ChainId;
        (function (ChainId) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_chainId',
                    });
                }
            }
            ChainId.Request = Request;
            class Response {
                constructor(raw) {
                    const result = raw.result ? BigInt(raw.result) : null;
                    if (result === null)
                        throw new Error(`eth_chainId returned null`);
                    this.result = result;
                }
            }
            ChainId.Response = Response;
        })(ChainId = Eth.ChainId || (Eth.ChainId = {}));
        let Coinbase;
        (function (Coinbase) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_coinbase',
                    });
                }
            }
            Coinbase.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = raw !== null ? BigInt(raw.result) : null;
                }
            }
            Coinbase.Response = Response;
        })(Coinbase = Eth.Coinbase || (Eth.Coinbase = {}));
        let EstimateGas;
        (function (EstimateGas) {
            class Request {
                constructor(id, transaction) {
                    this.id = id;
                    this.transaction = transaction;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_estimateGas',
                        params: [wireEncodeOffChainTransaction(this.transaction)],
                    });
                }
            }
            EstimateGas.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            EstimateGas.Response = Response;
        })(EstimateGas = Eth.EstimateGas || (Eth.EstimateGas = {}));
        let GasPrice;
        (function (GasPrice) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_gasPrice',
                    });
                }
            }
            GasPrice.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            GasPrice.Response = Response;
        })(GasPrice = Eth.GasPrice || (Eth.GasPrice = {}));
        let GetBalance;
        (function (GetBalance) {
            class Request {
                constructor(id, address, blockTag = 'latest') {
                    this.id = id;
                    this.address = address;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getBalance',
                        params: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetBalance.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            GetBalance.Response = Response;
        })(GetBalance = Eth.GetBalance || (Eth.GetBalance = {}));
        let GetBlockByHash;
        (function (GetBlockByHash) {
            class Request {
                constructor(id, hash, fullTransactions = false) {
                    this.id = id;
                    this.hash = hash;
                    this.fullTransactions = fullTransactions;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getBlockByHash',
                        params: [wireEncodeNumber(this.hash, 64), this.fullTransactions],
                    });
                }
            }
            GetBlockByHash.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = (raw.result !== null) ? new Block(raw.result) : null;
                }
            }
            GetBlockByHash.Response = Response;
        })(GetBlockByHash = Eth.GetBlockByHash || (Eth.GetBlockByHash = {}));
        let GetBlockByNumber;
        (function (GetBlockByNumber) {
            class Request {
                constructor(id, fullTransactions = false, blockTag = 'latest') {
                    this.id = id;
                    this.fullTransactions = fullTransactions;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getBlockByNumber',
                        params: [wireEncodeBlockTag(this.blockTag), this.fullTransactions],
                    });
                }
            }
            GetBlockByNumber.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = (raw.result !== null) ? new Block(raw.result) : null;
                }
            }
            GetBlockByNumber.Response = Response;
        })(GetBlockByNumber = Eth.GetBlockByNumber || (Eth.GetBlockByNumber = {}));
        let GetBlockTransactionCountByHash;
        (function (GetBlockTransactionCountByHash) {
            class Request {
                constructor(id, blockHash) {
                    this.id = id;
                    this.blockHash = blockHash;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getBlockTransactionCountByHash',
                        params: [wireEncodeNumber(this.blockHash, 64)],
                    });
                }
            }
            GetBlockTransactionCountByHash.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            GetBlockTransactionCountByHash.Response = Response;
        })(GetBlockTransactionCountByHash = Eth.GetBlockTransactionCountByHash || (Eth.GetBlockTransactionCountByHash = {}));
        let GetBlockTransactionCountByNumber;
        (function (GetBlockTransactionCountByNumber) {
            class Request {
                constructor(id, blockTag = 'latest') {
                    this.id = id;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getBlockTransactionCountByNumber',
                        params: [wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetBlockTransactionCountByNumber.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            GetBlockTransactionCountByNumber.Response = Response;
        })(GetBlockTransactionCountByNumber = Eth.GetBlockTransactionCountByNumber || (Eth.GetBlockTransactionCountByNumber = {}));
        let GetCode;
        (function (GetCode) {
            class Request {
                constructor(id, address, blockTag = 'latest') {
                    this.id = id;
                    this.address = address;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getCode',
                        params: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetCode.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = Bytes.fromHexString(raw.result);
                }
            }
            GetCode.Response = Response;
        })(GetCode = Eth.GetCode || (Eth.GetCode = {}));
        let GetLogs;
        (function (GetLogs) {
            class Request {
                constructor(id, criteria) {
                    this.id = id;
                    this.criteria = criteria;
                    this.wireEncode = () => {
                        const address = (Array.isArray(this.criteria.address)) ? this.criteria.address.map(x => wireEncodeNumber(x, 40)) : wireEncodeNumber(this.criteria.address, 40);
                        const topics = this.criteria.topics.map(x => wireEncodeNumber(x, 64));
                        const criteriaBlockTarget = this.isCriteriaHash(this.criteria)
                            ? { blockHash: wireEncodeNumber(this.criteria.blockHash, 64) }
                            : { fromBlock: wireEncodeBlockTag(this.criteria.fromBlock), toBlock: wireEncodeBlockTag(this.criteria.toBlock) };
                        const criteria = { address, topics, ...criteriaBlockTarget };
                        return {
                            jsonrpc: '2.0',
                            id: this.id,
                            method: 'eth_getLogs',
                            params: [criteria],
                        };
                    };
                    this.isCriteriaHash = (criteria) => !!criteria.blockHash;
                }
            }
            GetLogs.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = raw.result.map(x => new Log(x));
                }
            }
            GetLogs.Response = Response;
        })(GetLogs = Eth.GetLogs || (Eth.GetLogs = {}));
        let GetProof;
        (function (GetProof) {
            class Request {
                constructor(id, address, storageKeys, blockTag = 'latest') {
                    this.id = id;
                    this.address = address;
                    this.storageKeys = storageKeys;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getProof',
                        params: [wireEncodeNumber(this.address, 40), this.storageKeys.map(x => wireEncodeNumber(x, 64)), wireEncodeBlockTag(this.blockTag)]
                    });
                }
            }
            GetProof.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = new MerklePatritiaProof(raw.result);
                }
            }
            GetProof.Response = Response;
        })(GetProof = Eth.GetProof || (Eth.GetProof = {}));
        let GetStorageAt;
        (function (GetStorageAt) {
            class Request {
                constructor(id, address, index, blockTag = 'latest') {
                    this.id = id;
                    this.address = address;
                    this.index = index;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getStorageAt',
                        params: [wireEncodeNumber(this.address, 40), wireEncodeNumber(this.index), wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetStorageAt.Request = Request;
            class Response {
                constructor(raw) {
                    this.result = BigInt(raw.result);
                }
            }
            GetStorageAt.Response = Response;
        })(GetStorageAt = Eth.GetStorageAt || (Eth.GetStorageAt = {}));
        let GetTransactionByBlockHashAndIndex;
        (function (GetTransactionByBlockHashAndIndex) {
            class Request {
                constructor(id, blockHash, transactionIndex) {
                    this.id = id;
                    this.blockHash = blockHash;
                    this.transactionIndex = transactionIndex;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getTransactionByBlockHashAndIndex',
                        params: [wireEncodeNumber(this.blockHash, 64), wireEncodeNumber(this.transactionIndex)],
                    });
                }
            }
            GetTransactionByBlockHashAndIndex.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new Transaction(raw.result) : null;
                }
            }
            GetTransactionByBlockHashAndIndex.Response = Response;
        })(GetTransactionByBlockHashAndIndex = Eth.GetTransactionByBlockHashAndIndex || (Eth.GetTransactionByBlockHashAndIndex = {}));
        let GetTransactionByBlockNumberAndIndex;
        (function (GetTransactionByBlockNumberAndIndex) {
            class Request {
                constructor(id, transactionIndex, blockTag = 'latest') {
                    this.id = id;
                    this.transactionIndex = transactionIndex;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getTransactionByBlockNumberAndIndex',
                        params: [wireEncodeBlockTag(this.blockTag), wireEncodeNumber(this.transactionIndex)],
                    });
                }
            }
            GetTransactionByBlockNumberAndIndex.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new Transaction(raw.result) : null;
                }
            }
            GetTransactionByBlockNumberAndIndex.Response = Response;
        })(GetTransactionByBlockNumberAndIndex = Eth.GetTransactionByBlockNumberAndIndex || (Eth.GetTransactionByBlockNumberAndIndex = {}));
        let GetTransactionByHash;
        (function (GetTransactionByHash) {
            class Request {
                constructor(id, transactionHash) {
                    this.id = id;
                    this.transactionHash = transactionHash;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getTransactionByHash',
                        params: [wireEncodeNumber(this.transactionHash, 64)],
                    });
                }
            }
            GetTransactionByHash.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new Transaction(raw.result) : null;
                }
            }
            GetTransactionByHash.Response = Response;
        })(GetTransactionByHash = Eth.GetTransactionByHash || (Eth.GetTransactionByHash = {}));
        let GetTransactionCount;
        (function (GetTransactionCount) {
            class Request {
                constructor(id, address, blockTag = 'latest') {
                    this.id = id;
                    this.address = address;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getTransactionCount',
                        params: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetTransactionCount.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = BigInt(raw.result);
                }
            }
            GetTransactionCount.Response = Response;
        })(GetTransactionCount = Eth.GetTransactionCount || (Eth.GetTransactionCount = {}));
        let GetTransactionReceipt;
        (function (GetTransactionReceipt) {
            class Request {
                constructor(id, transactionHash) {
                    this.id = id;
                    this.transactionHash = transactionHash;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getTransactionReceipt',
                        params: [wireEncodeNumber(this.transactionHash, 64)],
                    });
                }
            }
            GetTransactionReceipt.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new TransactionReceipt(raw.result) : null;
                }
            }
            GetTransactionReceipt.Response = Response;
        })(GetTransactionReceipt = Eth.GetTransactionReceipt || (Eth.GetTransactionReceipt = {}));
        let GetUncleByBlockHashAndIndex;
        (function (GetUncleByBlockHashAndIndex) {
            class Request {
                constructor(id, blockHash, uncleIndex) {
                    this.id = id;
                    this.blockHash = blockHash;
                    this.uncleIndex = uncleIndex;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getUncleByBlockHashAndIndex',
                        params: [wireEncodeNumber(this.blockHash, 64), wireEncodeNumber(this.uncleIndex)],
                    });
                }
            }
            GetUncleByBlockHashAndIndex.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new Block(raw.result) : null;
                }
            }
            GetUncleByBlockHashAndIndex.Response = Response;
        })(GetUncleByBlockHashAndIndex = Eth.GetUncleByBlockHashAndIndex || (Eth.GetUncleByBlockHashAndIndex = {}));
        let GetUncleByBlockNumberAndIndex;
        (function (GetUncleByBlockNumberAndIndex) {
            class Request {
                constructor(id, blockTag, uncleIndex) {
                    this.id = id;
                    this.blockTag = blockTag;
                    this.uncleIndex = uncleIndex;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getUncleByBlockNumberAndIndex',
                        params: [wireEncodeBlockTag(this.blockTag), wireEncodeNumber(this.uncleIndex)],
                    });
                }
            }
            GetUncleByBlockNumberAndIndex.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (raw.result !== null) ? new Block(raw.result) : null;
                }
            }
            GetUncleByBlockNumberAndIndex.Response = Response;
        })(GetUncleByBlockNumberAndIndex = Eth.GetUncleByBlockNumberAndIndex || (Eth.GetUncleByBlockNumberAndIndex = {}));
        let GetUncleCountByBlockHash;
        (function (GetUncleCountByBlockHash) {
            class Request {
                constructor(id, blockHash) {
                    this.id = id;
                    this.blockHash = blockHash;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getUncleCountByBlockHash',
                        params: [wireEncodeNumber(this.blockHash, 64)],
                    });
                }
            }
            GetUncleCountByBlockHash.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = BigInt(raw.result);
                }
            }
            GetUncleCountByBlockHash.Response = Response;
        })(GetUncleCountByBlockHash = Eth.GetUncleCountByBlockHash || (Eth.GetUncleCountByBlockHash = {}));
        let GetUncleCountByBlockNumber;
        (function (GetUncleCountByBlockNumber) {
            class Request {
                constructor(id, blockTag) {
                    this.id = id;
                    this.blockTag = blockTag;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_getUncleCountByBlockNumber',
                        params: [wireEncodeBlockTag(this.blockTag)],
                    });
                }
            }
            GetUncleCountByBlockNumber.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = BigInt(raw.result);
                }
            }
            GetUncleCountByBlockNumber.Response = Response;
        })(GetUncleCountByBlockNumber = Eth.GetUncleCountByBlockNumber || (Eth.GetUncleCountByBlockNumber = {}));
        let ProtocolVersion;
        (function (ProtocolVersion) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_protocolVersion',
                    });
                }
            }
            ProtocolVersion.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = raw.result;
                }
            }
            ProtocolVersion.Response = Response;
        })(ProtocolVersion = Eth.ProtocolVersion || (Eth.ProtocolVersion = {}));
        let SendRawTransaction;
        (function (SendRawTransaction) {
            class Request {
                constructor(id, signedTransaction) {
                    this.id = id;
                    this.signedTransaction = signedTransaction;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_sendRawTransaction',
                        params: [wireEncodeByteArray(this.signedTransaction)],
                    });
                }
            }
            SendRawTransaction.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = BigInt(raw.result);
                }
            }
            SendRawTransaction.Response = Response;
        })(SendRawTransaction = Eth.SendRawTransaction || (Eth.SendRawTransaction = {}));
        let SendTransaction;
        (function (SendTransaction) {
            class Request {
                constructor(id, transaction) {
                    this.id = id;
                    this.transaction = transaction;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_sendTransaction',
                        params: [wireEncodeOnChainTransaction(this.transaction)],
                    });
                }
            }
            SendTransaction.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = BigInt(raw.result);
                }
            }
            SendTransaction.Response = Response;
        })(SendTransaction = Eth.SendTransaction || (Eth.SendTransaction = {}));
        let Sign;
        (function (Sign) {
            class Request {
                constructor(id, signerAddress, data) {
                    this.id = id;
                    this.signerAddress = signerAddress;
                    this.data = data;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_sign',
                        params: [wireEncodeNumber(this.signerAddress, 40), wireEncodeByteArray(this.data)],
                    });
                }
            }
            Sign.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = Bytes.fromHexString(raw.result);
                }
            }
            Sign.Response = Response;
        })(Sign = Eth.Sign || (Eth.Sign = {}));
        let SignTransaction;
        (function (SignTransaction) {
            class Request {
                constructor(id, transaction) {
                    this.id = id;
                    this.transaction = transaction;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_signTransaction',
                        params: [wireEncodeOnChainTransaction(this.transaction)],
                    });
                }
            }
            SignTransaction.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = {
                        decodedTransaction: new SignedTransaction(raw.result.tx),
                        encodedTransaction: Bytes.fromHexString(raw.result.raw),
                    };
                }
            }
            SignTransaction.Response = Response;
        })(SignTransaction = Eth.SignTransaction || (Eth.SignTransaction = {}));
        let Syncing;
        (function (Syncing) {
            class Request {
                constructor(id) {
                    this.id = id;
                    this.wireEncode = () => ({
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'eth_syncing',
                    });
                }
            }
            Syncing.Request = Request;
            class Response {
                constructor(raw) {
                    this.id = raw.id;
                    this.result = (typeof raw.result === 'boolean') ? raw.result : {
                        currentBlock: BigInt(raw.result.currentBlock),
                        highestBlock: BigInt(raw.result.highestBlock),
                        startingBlock: BigInt(raw.result.startingBlock),
                    };
                }
            }
            Syncing.Response = Response;
        })(Syncing = Eth.Syncing || (Eth.Syncing = {}));
    })(Eth = Rpc.Eth || (Rpc.Eth = {}));
})(Rpc = exports.Rpc || (exports.Rpc = {}));
//# sourceMappingURL=index.js.map