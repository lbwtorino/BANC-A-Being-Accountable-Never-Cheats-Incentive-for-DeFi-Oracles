export declare class Bytes extends Uint8Array {
    static fromByteArray(bytes: ArrayLike<number>, pad?: 'left' | 'right'): Bytes;
    static fromHexString(hex: string, pad?: 'left' | 'right'): Bytes;
    static fromStringLiteral(literal: string, pad32?: 'left' | 'right' | 'none'): Bytes;
    static fromUnsignedInteger(value: bigint | number, numberOfBits: number): Bytes;
    static fromSignedInteger(value: bigint | number, numberOfBits: number): Bytes;
    readonly toString: () => string;
    readonly to0xString: () => string;
    readonly toUnsignedBigint: () => bigint;
    readonly toSignedBigint: () => bigint;
    readonly equals: (other: {
        [i: number]: number;
        length: number;
    } | null | undefined) => boolean;
    static readonly [Symbol.species]: Uint8ArrayConstructor;
    private static twosComplement;
}
export declare type Encodable = EncodablePrimitive | EncodableTuple | EncodableArray;
export declare type EncodablePrimitive = Uint8Array | string | boolean | bigint;
export interface EncodableTuple {
    readonly [x: string]: Encodable;
}
export interface EncodableArray extends ReadonlyArray<Encodable> {
}
export declare type RawHash = string;
export declare type RawQuantity = string;
export declare type RawBlockTag = string;
export declare type RawAddress = string;
export declare type RawData = string;
export interface RawLog {
    readonly blockHash: RawHash;
    readonly blockNumber: RawQuantity;
    readonly transactionHash: RawHash;
    readonly transactionIndex: RawQuantity;
    readonly logIndex: RawQuantity;
    readonly address: RawAddress;
    readonly topics: Array<RawHash>;
    readonly data: RawData;
}
export interface RawTransactionReceipt {
    readonly blockHash: RawHash;
    readonly blockNumber: RawQuantity;
    readonly transactionHash: RawHash;
    readonly transactionIndex: RawQuantity;
    readonly from: RawAddress;
    readonly to: RawAddress | null;
    readonly contractAddress: RawAddress | null;
    readonly cumulativeGasUsed: RawQuantity;
    readonly gasUsed: RawQuantity;
    readonly logs: Array<RawLog>;
    readonly logsBloom: RawData;
    readonly status: RawQuantity;
}
export interface RawTransaction {
    readonly blockHash: RawHash | null;
    readonly blockNumber: RawQuantity | null;
    readonly hash: RawHash;
    readonly transactionIndex: RawQuantity | null;
    readonly from: RawAddress;
    readonly to: RawAddress | null;
    readonly value: RawQuantity;
    readonly input: RawData;
    readonly nonce: RawQuantity;
    readonly gas: RawQuantity;
    readonly gasPrice: RawQuantity;
    readonly r: RawQuantity;
    readonly s: RawQuantity;
    readonly v: RawQuantity;
}
export interface RawBlock {
    readonly hash: RawHash | null;
    readonly number: RawQuantity | null;
    readonly nonce: RawData | null | undefined;
    readonly logsBloom: RawData | null;
    readonly parentHash: RawHash;
    readonly sha3Uncles: RawHash;
    readonly transactionsRoot: RawData;
    readonly stateRoot: RawData;
    readonly receiptsRoot: RawData;
    readonly miner: RawAddress;
    readonly difficulty: RawQuantity;
    readonly totalDifficulty: RawQuantity;
    readonly extraData: RawData;
    readonly size: RawQuantity;
    readonly gasLimit: RawQuantity;
    readonly gasUsed: RawQuantity;
    readonly timestamp: RawQuantity;
    readonly mixHash: RawHash | undefined;
    readonly transactions: Array<RawTransaction | RawHash>;
    readonly uncles: Array<RawHash>;
}
export interface RawTypedData {
    readonly types: {
        readonly EIP712Domain: Array<{
            name: string;
            type: string;
        }>;
        readonly [type: string]: Array<{
            name: string;
            type: string;
        }>;
    };
    readonly primaryType: string;
    readonly domain: unknown;
    readonly message: unknown;
}
export interface RawMerklePatritiaProof {
    balance: RawQuantity;
    codeHash: RawHash;
    nonce: RawQuantity;
    storageHash: RawHash;
    accountProof: Array<RawData>;
    storageProof: Array<{
        key: RawQuantity;
        value: RawQuantity | null;
        proof: Array<RawData>;
    }>;
}
export interface RawOffChainTransaction {
    readonly from: RawAddress;
    readonly to: RawAddress | null;
    readonly value: RawQuantity;
    readonly data: RawData;
    readonly gas: RawQuantity | null;
    readonly gasPrice: RawQuantity;
}
export interface RawOnChainTransaction extends RawOffChainTransaction {
    readonly nonce: RawQuantity;
}
export interface RawSignedTransaction {
    readonly from: RawAddress;
    readonly to: RawAddress | null;
    readonly value: RawQuantity;
    readonly input: RawData;
    readonly nonce: RawQuantity;
    readonly gas: RawQuantity;
    readonly gasPrice: RawQuantity;
    readonly r: RawQuantity;
    readonly s: RawQuantity;
    readonly v: RawQuantity;
}
export interface ILog {
    readonly blockHash: bigint;
    readonly blockNumber: bigint;
    readonly transactionHash: bigint;
    readonly transactionIndex: bigint;
    readonly logIndex: bigint;
    readonly address: bigint;
    readonly topics: Array<bigint>;
    readonly data: Uint8Array;
}
export declare class Log implements ILog {
    readonly blockHash: bigint;
    readonly blockNumber: bigint;
    readonly transactionHash: bigint;
    readonly transactionIndex: bigint;
    readonly logIndex: bigint;
    readonly address: bigint;
    readonly topics: Array<bigint>;
    readonly data: Bytes;
    constructor(raw: RawLog);
}
export interface ITransactionReceipt {
    readonly blockHash: bigint;
    readonly blockNumber: bigint;
    readonly hash: bigint;
    readonly index: bigint;
    readonly from: bigint;
    readonly to: bigint | null;
    readonly contractAddress: bigint | null;
    readonly cumulativeGasUsed: bigint;
    readonly gasUsed: bigint;
    readonly logs: Array<ILog>;
    readonly logsBloom: bigint;
    readonly status: boolean;
}
export declare class TransactionReceipt implements ITransactionReceipt {
    readonly blockHash: bigint;
    readonly blockNumber: bigint;
    readonly hash: bigint;
    readonly index: bigint;
    readonly from: bigint;
    readonly to: bigint | null;
    readonly contractAddress: bigint | null;
    readonly cumulativeGasUsed: bigint;
    readonly gasUsed: bigint;
    readonly logs: Array<Log>;
    readonly logsBloom: bigint;
    readonly status: boolean;
    constructor(raw: RawTransactionReceipt);
}
export interface ITransaction {
    readonly blockHash: bigint | null;
    readonly blockNumber: bigint | null;
    readonly hash: bigint;
    readonly index: bigint | null;
    readonly from: bigint;
    readonly to: bigint | null;
    readonly value: bigint;
    readonly data: Uint8Array;
    readonly nonce: bigint;
    readonly gas: bigint;
    readonly gasPrice: bigint;
    readonly r: bigint;
    readonly s: bigint;
    readonly v: bigint;
}
export declare class Transaction implements ITransaction {
    readonly blockHash: bigint | null;
    readonly blockNumber: bigint | null;
    readonly hash: bigint;
    readonly index: bigint | null;
    readonly from: bigint;
    readonly to: bigint | null;
    readonly value: bigint;
    readonly data: Bytes;
    readonly nonce: bigint;
    readonly gas: bigint;
    readonly gasPrice: bigint;
    readonly r: bigint;
    readonly s: bigint;
    readonly v: bigint;
    constructor(raw: RawTransaction);
}
export interface IBlock {
    readonly hash: bigint | null;
    readonly number: bigint | null;
    readonly nonce: bigint | null;
    readonly logsBloom: bigint | null;
    readonly parentHash: bigint;
    readonly sha3Uncles: bigint;
    readonly transactionsRoot: bigint;
    readonly stateRoot: bigint;
    readonly receiptsRoot: bigint;
    readonly miner: bigint;
    readonly difficulty: bigint;
    readonly totalDifficulty: bigint;
    readonly extraData: Uint8Array;
    readonly size: bigint;
    readonly gasLimit: bigint;
    readonly gasUsed: bigint;
    readonly timestamp: Date;
    readonly mixHash: bigint | null;
    readonly transactions: Array<ITransaction | bigint>;
    readonly uncles: Array<bigint>;
}
export declare class Block implements IBlock {
    readonly hash: bigint | null;
    readonly number: bigint | null;
    /** Will be null for OpenEthereum Proof of Authority networks. */
    readonly nonce: bigint | null;
    readonly logsBloom: bigint | null;
    readonly parentHash: bigint;
    readonly sha3Uncles: bigint;
    readonly transactionsRoot: bigint;
    readonly stateRoot: bigint;
    readonly receiptsRoot: bigint;
    readonly miner: bigint;
    readonly difficulty: bigint;
    readonly totalDifficulty: bigint;
    readonly extraData: Bytes;
    readonly size: bigint;
    readonly gasLimit: bigint;
    readonly gasUsed: bigint;
    readonly timestamp: Date;
    /** Will be null for OpenEthereum Proof of Authority networks. */
    readonly mixHash: bigint | null;
    readonly transactions: Array<Transaction | bigint>;
    readonly uncles: Array<bigint>;
    constructor(raw: RawBlock);
}
export declare class MerklePatritiaProof {
    balance: bigint;
    codeHash: bigint;
    nonce: bigint;
    storageHash: bigint;
    accountProof: readonly Bytes[];
    storageProof: readonly {
        key: bigint;
        value: bigint;
        proof: readonly Bytes[];
    }[];
    constructor(raw: RawMerklePatritiaProof);
}
export interface ISignature {
    readonly r: bigint;
    readonly s: bigint;
    readonly v: bigint;
}
export interface IOffChainTransaction {
    readonly from: bigint;
    readonly to: bigint | null;
    readonly value: bigint;
    readonly data: Uint8Array;
    readonly gasLimit: bigint | null;
    readonly gasPrice: bigint;
}
export interface IOnChainTransaction extends IOffChainTransaction {
    readonly gasLimit: bigint;
    readonly nonce: bigint;
}
export interface IUnsignedTransaction extends IOnChainTransaction {
    readonly chainId: bigint;
}
export interface ISignedTransaction extends IOnChainTransaction, ISignature {
}
export declare class SignedTransaction implements ISignedTransaction {
    readonly from: bigint;
    readonly to: bigint | null;
    readonly value: bigint;
    readonly data: Uint8Array;
    readonly gasPrice: bigint;
    readonly gasLimit: bigint;
    readonly nonce: bigint;
    readonly r: bigint;
    readonly s: bigint;
    readonly v: bigint;
    constructor(raw: RawSignedTransaction);
}
export declare function wireEncodeByteArray(bytes: ArrayLike<number>): string;
export declare function wireEncodeNumber(value: number | bigint, padding?: number): RawQuantity;
export declare type BlockTag = 'latest' | 'earliest' | 'pending' | bigint;
export declare function wireEncodeBlockTag(tag: BlockTag): RawBlockTag;
export declare function wireEncodeOffChainTransaction(transaction: IOffChainTransaction): RawOffChainTransaction;
export declare function wireEncodeOnChainTransaction(transaction: IOnChainTransaction): RawOnChainTransaction;
export declare type JsonRpcMethod = 'eth_accounts' | 'eth_blockNumber' | 'eth_call' | 'eth_chainId' | 'eth_coinbase' | 'eth_estimateGas' | 'eth_gasPrice' | 'eth_getBalance' | 'eth_getBlockByHash' | 'eth_getBlockByNumber' | 'eth_getBlockTransactionCountByHash' | 'eth_getBlockTransactionCountByNumber' | 'eth_getCode' | 'eth_getLogs' | 'eth_getProof' | 'eth_getStorageAt' | 'eth_getTransactionByBlockHashAndIndex' | 'eth_getTransactionByBlockNumberAndIndex' | 'eth_getTransactionByHash' | 'eth_getTransactionCount' | 'eth_getTransactionReceipt' | 'eth_getUncleByBlockHashAndIndex' | 'eth_getUncleByBlockNumberAndIndex' | 'eth_getUncleCountByBlockHash' | 'eth_getUncleCountByBlockNumber' | 'eth_protocolVersion' | 'eth_sendRawTransaction' | 'eth_sendTransaction' | 'eth_sign' | 'eth_signTransaction' | 'eth_signTypedData' | 'eth_syncing';
export interface IJsonRpcRequest<TMethod extends JsonRpcMethod, TParams extends Array<unknown>> {
    readonly jsonrpc: '2.0';
    readonly id: string | number | null;
    readonly method: TMethod;
    readonly params?: TParams;
}
export interface IJsonRpcSuccess<TResult> {
    readonly jsonrpc: '2.0';
    readonly id: string | number | null;
    readonly result: TResult;
}
export interface IJsonRpcError {
    readonly jsonrpc: '2.0';
    readonly id: string | number | null;
    readonly error: {
        readonly code: number;
        readonly message: string;
        readonly data?: unknown;
    };
}
export declare type IJsonRpcResponse<T> = IJsonRpcSuccess<T> | IJsonRpcError;
export declare function validateJsonRpcResponse<T>(response: any): response is IJsonRpcResponse<T>;
export declare function isJsonRpcSuccess<T>(response: IJsonRpcResponse<T>): response is IJsonRpcSuccess<T>;
export declare function isJsonRpcError<T>(response: IJsonRpcResponse<T>): response is IJsonRpcError;
export declare namespace Rpc {
    namespace Eth {
        namespace Accounts {
            interface RawRequest extends IJsonRpcRequest<'eth_accounts', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<Array<RawData>> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Array<bigint>;
                constructor(raw: RawResponse);
            }
        }
        namespace BlockNumber {
            interface RawRequest extends IJsonRpcRequest<'eth_blockNumber', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace Call {
            interface RawRequest extends IJsonRpcRequest<'eth_call', [RawOffChainTransaction, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawData> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transaction: IOffChainTransaction;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, transaction: IOffChainTransaction, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: Bytes;
                constructor(raw: RawResponse);
            }
        }
        namespace ChainId {
            interface RawRequest extends IJsonRpcRequest<'eth_chainId', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity | null> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace Coinbase {
            interface RawRequest extends IJsonRpcRequest<'eth_coinbase', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawAddress> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint | null;
                constructor(raw: RawResponse);
            }
        }
        namespace EstimateGas {
            interface RawRequest extends IJsonRpcRequest<'eth_estimateGas', [RawOffChainTransaction]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transaction: IOffChainTransaction;
                constructor(id: string | number | null, transaction: IOffChainTransaction);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GasPrice {
            interface RawRequest extends IJsonRpcRequest<'eth_gasPrice', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetBalance {
            interface RawRequest extends IJsonRpcRequest<'eth_getBalance', [RawAddress, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly address: bigint;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, address: bigint, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetBlockByHash {
            interface RawRequest extends IJsonRpcRequest<'eth_getBlockByHash', [RawHash, boolean]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawBlock | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly hash: bigint;
                readonly fullTransactions: boolean;
                constructor(id: string | number | null, hash: bigint, fullTransactions?: boolean);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: Block | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetBlockByNumber {
            interface RawRequest extends IJsonRpcRequest<'eth_getBlockByNumber', [RawBlockTag, boolean]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawBlock | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly fullTransactions: boolean;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, fullTransactions?: boolean, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: Block | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetBlockTransactionCountByHash {
            interface RawRequest extends IJsonRpcRequest<'eth_getBlockTransactionCountByHash', [RawHash]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockHash: bigint;
                constructor(id: string | number | null, blockHash: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetBlockTransactionCountByNumber {
            interface RawRequest extends IJsonRpcRequest<'eth_getBlockTransactionCountByNumber', [RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetCode {
            interface RawRequest extends IJsonRpcRequest<'eth_getCode', [RawAddress, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawData> {
            }
            class Request {
                readonly id: string | number | null;
                readonly address: bigint;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, address: bigint, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: Bytes;
                constructor(raw: RawResponse);
            }
        }
        namespace GetLogs {
            interface RawRequest extends IJsonRpcRequest<'eth_getLogs', [{
                address: RawAddress | Array<RawAddress>;
                topics: Array<RawHash>;
            } & ({
                fromBlock: RawBlockTag;
                toBlock: RawBlockTag;
            } | {
                blockHash: RawHash;
            })]> {
            }
            interface RawResponse extends IJsonRpcSuccess<Array<RawLog>> {
            }
            class Request {
                readonly id: string | number | null;
                readonly criteria: Criteria;
                constructor(id: string | number | null, criteria: CriteriaTag);
                constructor(id: string | number | null, criteria: CriteriaHash);
                constructor(id: string | number | null, criteria: Criteria);
                readonly wireEncode: () => RawRequest;
                private readonly isCriteriaHash;
            }
            class Response {
                readonly result: Array<Log>;
                constructor(raw: RawResponse);
            }
            interface CriteriaBase {
                address: bigint | Array<bigint>;
                topics: Array<bigint>;
            }
            interface CriteriaHash extends CriteriaBase {
                blockHash: bigint;
            }
            interface CriteriaTag extends CriteriaBase {
                fromBlock: bigint;
                toBlock: bigint;
            }
            type Criteria = CriteriaHash | CriteriaTag;
        }
        namespace GetProof {
            interface RawRequest extends IJsonRpcRequest<'eth_getProof', [RawAddress, Array<RawHash>, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawMerklePatritiaProof> {
            }
            class Request {
                readonly id: string | number | null;
                readonly address: bigint;
                readonly storageKeys: readonly bigint[];
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, address: bigint, storageKeys: readonly bigint[], blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: MerklePatritiaProof;
                constructor(raw: RawResponse);
            }
        }
        namespace GetStorageAt {
            interface RawRequest extends IJsonRpcRequest<'eth_getStorageAt', [RawAddress, RawQuantity, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawData> {
            }
            class Request {
                readonly id: string | number | null;
                readonly address: bigint;
                readonly index: bigint;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, address: bigint, index: bigint, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetTransactionByBlockHashAndIndex {
            interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByBlockHashAndIndex', [RawHash, RawQuantity]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockHash: bigint;
                readonly transactionIndex: bigint;
                constructor(id: string | number | null, blockHash: bigint, transactionIndex: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Transaction | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetTransactionByBlockNumberAndIndex {
            interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByBlockNumberAndIndex', [RawBlockTag, RawQuantity]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transactionIndex: bigint;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, transactionIndex: bigint, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Transaction | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetTransactionByHash {
            interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByHash', [RawHash]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transactionHash: bigint;
                constructor(id: string | number | null, transactionHash: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Transaction | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetTransactionCount {
            interface RawRequest extends IJsonRpcRequest<'eth_getTransactionCount', [RawAddress, RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly address: bigint;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, address: bigint, blockTag?: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetTransactionReceipt {
            interface RawRequest extends IJsonRpcRequest<'eth_getTransactionReceipt', [RawHash]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawTransactionReceipt | null> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transactionHash: bigint;
                constructor(id: string | number | null, transactionHash: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: TransactionReceipt | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetUncleByBlockHashAndIndex {
            interface RawRequest extends IJsonRpcRequest<'eth_getUncleByBlockHashAndIndex', [RawHash, RawQuantity]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawBlock> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockHash: bigint;
                readonly uncleIndex: bigint;
                constructor(id: string | number | null, blockHash: bigint, uncleIndex: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Block | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetUncleByBlockNumberAndIndex {
            interface RawRequest extends IJsonRpcRequest<'eth_getUncleByBlockNumberAndIndex', [RawBlockTag, RawQuantity]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawBlock> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockTag: BlockTag;
                readonly uncleIndex: bigint;
                constructor(id: string | number | null, blockTag: BlockTag, uncleIndex: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Block | null;
                constructor(raw: RawResponse);
            }
        }
        namespace GetUncleCountByBlockHash {
            interface RawRequest extends IJsonRpcRequest<'eth_getUncleCountByBlockHash', [RawHash]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockHash: bigint;
                constructor(id: string | number | null, blockHash: bigint);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace GetUncleCountByBlockNumber {
            interface RawRequest extends IJsonRpcRequest<'eth_getUncleCountByBlockNumber', [RawBlockTag]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawQuantity> {
            }
            class Request {
                readonly id: string | number | null;
                readonly blockTag: BlockTag;
                constructor(id: string | number | null, blockTag: BlockTag);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace ProtocolVersion {
            interface RawRequest extends IJsonRpcRequest<'eth_protocolVersion', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<string> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: string;
                constructor(raw: RawResponse);
            }
        }
        namespace SendRawTransaction {
            interface RawRequest extends IJsonRpcRequest<'eth_sendRawTransaction', [RawData]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawHash> {
            }
            class Request {
                readonly id: string | number | null;
                readonly signedTransaction: Uint8Array;
                constructor(id: string | number | null, signedTransaction: Uint8Array);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace SendTransaction {
            interface RawRequest extends IJsonRpcRequest<'eth_sendTransaction', [RawOnChainTransaction]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawHash> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transaction: IOnChainTransaction;
                constructor(id: string | number | null, transaction: IOnChainTransaction);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: bigint;
                constructor(raw: RawResponse);
            }
        }
        namespace Sign {
            interface RawRequest extends IJsonRpcRequest<'eth_sign', [RawAddress, RawData]> {
            }
            interface RawResponse extends IJsonRpcSuccess<RawHash> {
            }
            class Request {
                readonly id: string | number | null;
                readonly signerAddress: bigint;
                readonly data: Uint8Array;
                constructor(id: string | number | null, signerAddress: bigint, data: Uint8Array);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: Bytes;
                constructor(raw: RawResponse);
            }
        }
        namespace SignTransaction {
            interface RawRequest extends IJsonRpcRequest<'eth_signTransaction', [RawOnChainTransaction]> {
            }
            interface RawResponse extends IJsonRpcSuccess<{
                raw: RawData;
                tx: RawSignedTransaction;
            }> {
            }
            class Request {
                readonly id: string | number | null;
                readonly transaction: IOnChainTransaction;
                constructor(id: string | number | null, transaction: IOnChainTransaction);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: {
                    decodedTransaction: ISignedTransaction;
                    encodedTransaction: Uint8Array;
                };
                constructor(raw: RawResponse);
            }
        }
        namespace Syncing {
            interface RawRequest extends IJsonRpcRequest<'eth_syncing', []> {
            }
            interface RawResponse extends IJsonRpcSuccess<false | {
                readonly currentBlock: RawQuantity;
                readonly highestBlock: RawQuantity;
                readonly startingBlock: RawQuantity;
            }> {
            }
            class Request {
                readonly id: string | number | null;
                constructor(id: string | number | null);
                readonly wireEncode: () => RawRequest;
            }
            class Response {
                readonly id: string | number | null;
                readonly result: false | {
                    readonly currentBlock: bigint;
                    readonly highestBlock: bigint;
                    readonly startingBlock: bigint;
                };
                constructor(raw: RawResponse);
            }
        }
    }
}
declare type DropFirst<T extends any[]> = ((...t: T) => void) extends ((x: any, ...u: infer U) => void) ? U : never;
declare type ResultType<T extends {
    readonly result: unknown;
}> = T extends {
    readonly result: infer R;
} ? R : never;
declare type RpcMethod<TRequestConstructor extends new (id: string | number | null, ...args: any[]) => {
    wireEncode: () => IJsonRpcRequest<JsonRpcMethod, any[]>;
}, TResponseConstructor extends new (rawResponse: IJsonRpcSuccess<any>) => {
    readonly result: any;
}> = (...args: DropFirst<ConstructorParameters<TRequestConstructor>>) => Promise<ResultType<InstanceType<TResponseConstructor>>>;
declare type MakeRequired<T, K extends keyof T> = T & {
    [Key in K]-?: T[Key];
};
export interface JsonRpc {
    readonly sendEth: (destination: bigint, amount: bigint) => Promise<TransactionReceipt>;
    readonly deployContract: (bytecode: Uint8Array, value?: bigint) => Promise<bigint>;
    readonly onChainContractCall: (transaction: MakeRequired<Partial<IOnChainTransaction>, 'to' | 'data'>) => Promise<TransactionReceipt>;
    readonly offChainContractCall: (transaction: MakeRequired<Partial<IOffChainTransaction>, 'to' | 'data'>) => Promise<Bytes>;
    readonly remoteProcedureCall: <TRawRequest extends IJsonRpcRequest<JsonRpcMethod, Array<any>>, TRawResponse extends IJsonRpcSuccess<any>>(request: TRawRequest) => Promise<TRawResponse>;
    readonly call: RpcMethod<typeof Rpc.Eth.Call.Request, typeof Rpc.Eth.Call.Response>;
    readonly coinbase: RpcMethod<typeof Rpc.Eth.Coinbase.Request, typeof Rpc.Eth.Coinbase.Response>;
    readonly estimateGas: RpcMethod<typeof Rpc.Eth.EstimateGas.Request, typeof Rpc.Eth.EstimateGas.Response>;
    readonly getAccounts: RpcMethod<typeof Rpc.Eth.Accounts.Request, typeof Rpc.Eth.Accounts.Response>;
    readonly getBalance: RpcMethod<typeof Rpc.Eth.GetBalance.Request, typeof Rpc.Eth.GetBalance.Response>;
    readonly getBlockByHash: RpcMethod<typeof Rpc.Eth.GetBlockByHash.Request, typeof Rpc.Eth.GetBlockByHash.Response>;
    readonly getBlockByNumber: RpcMethod<typeof Rpc.Eth.GetBlockByNumber.Request, typeof Rpc.Eth.GetBlockByNumber.Response>;
    readonly getBlockNumber: RpcMethod<typeof Rpc.Eth.BlockNumber.Request, typeof Rpc.Eth.BlockNumber.Response>;
    readonly getBlockTransactionCountByHash: RpcMethod<typeof Rpc.Eth.GetBlockTransactionCountByHash.Request, typeof Rpc.Eth.GetBlockTransactionCountByHash.Response>;
    readonly getBlockTransactionCountByNumber: RpcMethod<typeof Rpc.Eth.GetBlockTransactionCountByNumber.Request, typeof Rpc.Eth.GetBlockTransactionCountByNumber.Response>;
    readonly getChainId: RpcMethod<typeof Rpc.Eth.ChainId.Request, typeof Rpc.Eth.ChainId.Response>;
    readonly getCode: RpcMethod<typeof Rpc.Eth.GetCode.Request, typeof Rpc.Eth.GetCode.Response>;
    readonly getGasPrice: RpcMethod<typeof Rpc.Eth.GasPrice.Request, typeof Rpc.Eth.GasPrice.Response>;
    readonly getLogs: RpcMethod<typeof Rpc.Eth.GetLogs.Request, typeof Rpc.Eth.GetLogs.Response>;
    readonly getProof: RpcMethod<typeof Rpc.Eth.GetProof.Request, typeof Rpc.Eth.GetProof.Response>;
    readonly getStorageAt: RpcMethod<typeof Rpc.Eth.GetStorageAt.Request, typeof Rpc.Eth.GetStorageAt.Response>;
    readonly getTransactionByBlockHashAndIndex: RpcMethod<typeof Rpc.Eth.GetTransactionByBlockHashAndIndex.Request, typeof Rpc.Eth.GetTransactionByBlockHashAndIndex.Response>;
    readonly getTransactionByBlockNumberAndIndex: RpcMethod<typeof Rpc.Eth.GetTransactionByBlockNumberAndIndex.Request, typeof Rpc.Eth.GetTransactionByBlockNumberAndIndex.Response>;
    readonly getTransactionByHash: RpcMethod<typeof Rpc.Eth.GetTransactionByHash.Request, typeof Rpc.Eth.GetTransactionByHash.Response>;
    readonly getTransactionCount: RpcMethod<typeof Rpc.Eth.GetTransactionCount.Request, typeof Rpc.Eth.GetTransactionCount.Response>;
    readonly getTransactionReceipt: RpcMethod<typeof Rpc.Eth.GetTransactionReceipt.Request, typeof Rpc.Eth.GetTransactionReceipt.Response>;
    readonly getUncleByBlockHashAndIndex: RpcMethod<typeof Rpc.Eth.GetUncleByBlockHashAndIndex.Request, typeof Rpc.Eth.GetUncleByBlockHashAndIndex.Response>;
    readonly getUncleByBlockNumberAndIndex: RpcMethod<typeof Rpc.Eth.GetUncleByBlockNumberAndIndex.Request, typeof Rpc.Eth.GetUncleByBlockNumberAndIndex.Response>;
    readonly getUncleCountByBlockHash: RpcMethod<typeof Rpc.Eth.GetUncleCountByBlockHash.Request, typeof Rpc.Eth.GetUncleCountByBlockHash.Response>;
    readonly getUncleCountByBlockNumber: RpcMethod<typeof Rpc.Eth.GetUncleCountByBlockNumber.Request, typeof Rpc.Eth.GetUncleCountByBlockNumber.Response>;
    readonly getProtocolVersion: RpcMethod<typeof Rpc.Eth.ProtocolVersion.Request, typeof Rpc.Eth.ProtocolVersion.Response>;
    readonly sendRawTransaction: RpcMethod<typeof Rpc.Eth.SendRawTransaction.Request, typeof Rpc.Eth.SendRawTransaction.Response>;
    readonly sendTransaction: RpcMethod<typeof Rpc.Eth.SendTransaction.Request, typeof Rpc.Eth.SendTransaction.Response>;
    readonly signTransaction: RpcMethod<typeof Rpc.Eth.SignTransaction.Request, typeof Rpc.Eth.SignTransaction.Response>;
    readonly sign: RpcMethod<typeof Rpc.Eth.Sign.Request, typeof Rpc.Eth.Sign.Response>;
    readonly syncing: RpcMethod<typeof Rpc.Eth.Syncing.Request, typeof Rpc.Eth.Syncing.Response>;
}
export {};
