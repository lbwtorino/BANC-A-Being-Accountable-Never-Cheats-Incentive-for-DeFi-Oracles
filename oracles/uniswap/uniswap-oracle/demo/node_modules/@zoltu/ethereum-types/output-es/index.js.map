{"version":3,"file":"index.js","sourceRoot":"","sources":["../source/index.ts"],"names":[],"mappings":"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","sourcesContent":["export class Bytes extends Uint8Array {\n\tpublic static fromByteArray(bytes: ArrayLike<number>, pad: 'left' | 'right' = 'right'): Bytes {\n\t\tconst result = new this(bytes.length)\n\t\tif (bytes.length > result.length) throw new Error(`Source bytes are longer (${bytes.length}) than destination bytes (${result.length})\\n${bytes}`)\n\t\tfor (let i = 0; i < bytes.length; ++i) {\n\t\t\tconst byte = bytes[i]\n\t\t\tif (byte > 0xff || byte < 0) throw new Error(`Source array must only include numbers between 0 and ${0xff}.\\n${bytes}`)\n\t\t}\n\t\tresult.set(bytes, (pad === 'left') ? result.length - bytes.length : 0)\n\t\treturn result\n\t}\n\n\tpublic static fromHexString(hex: string, pad?: 'left' | 'right'): Bytes {\n\t\tconst match = /^(?:0x)?([a-fA-F0-9]*)$/.exec(hex)\n\t\tif (match === null) throw new Error(`Expected a hex string encoded byte array with an optional '0x' prefix but received ${hex}`)\n\t\tconst normalized = match[1]\n\t\tif (normalized.length % 2) throw new Error(`Hex string encoded byte array must be an even number of charcaters long.`)\n\t\tconst bytes = []\n\t\tfor (let i = 0; i < normalized.length; i += 2) {\n\t\t\tbytes.push(Number.parseInt(`${normalized[i]}${normalized[i + 1]}`, 16))\n\t\t}\n\t\treturn this.fromByteArray(bytes, pad)\n\t}\n\n\tpublic static fromStringLiteral(literal: string, pad32: 'left' | 'right' | 'none' = 'none'): Bytes {\n\t\tconst encoded = new TextEncoder().encode(literal)\n\t\tconst padding = new Uint8Array((32 - encoded.length % 32) % 32)\n\t\tswitch (pad32) {\n\t\t\tcase 'none':\n\t\t\t\treturn this.fromByteArray(encoded)\n\t\t\tcase 'left':\n\t\t\t\treturn this.fromByteArray([...padding, ...encoded])\n\t\t\tcase 'right':\n\t\t\t\treturn this.fromByteArray([...encoded, ...padding])\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid 'pad32' parameter: ${pad32}.`)\n\t\t}\n\t}\n\n\tpublic static fromUnsignedInteger(value: bigint | number, numberOfBits: number): Bytes {\n\t\tif (numberOfBits % 8) throw new Error(`numberOfBits must be a multiple of 8.`)\n\t\tif (typeof value === 'number') value = BigInt(value)\n\t\tif (value >= 2n ** BigInt(numberOfBits) || value < 0n) throw new Error(`Cannot fit ${value} into a ${numberOfBits}-bit unsigned integer.`)\n\t\tconst numberOfBytes = numberOfBits / 8\n\t\tconst result = new this(numberOfBytes)\n\t\tif (result.length !== numberOfBytes) throw new Error(`Cannot a ${numberOfBits} value into a ${result.length} byte array.`)\n\t\tfor (let i = 0; i < result.length; ++i) {\n\t\t\tresult[i] = Number((value >> BigInt(numberOfBits - i * 8 - 8)) & 0xffn)\n\t\t}\n\t\treturn result\n\t}\n\n\tpublic static fromSignedInteger(value: bigint | number, numberOfBits: number): Bytes {\n\t\tif (typeof value === 'number') value = BigInt(value)\n\t\tif (value >= 2n ** BigInt(numberOfBits - 1) || value < -(2n ** BigInt(numberOfBits - 1))) throw new Error(`Cannot fit ${value} into a ${numberOfBits}-bit signed integer.`)\n\t\tconst unsignedValue = this.twosComplement(value, numberOfBits)\n\t\treturn this.fromUnsignedInteger(unsignedValue, numberOfBits)\n\t}\n\n\tpublic readonly toString = () => this.reduce((result: string, byte: number) => result + ('0' + byte.toString(16)).slice(-2), '')\n\n\tpublic readonly to0xString = () => wireEncodeByteArray(this)\n\n\tpublic readonly toUnsignedBigint = () => {\n\t\tlet value = 0n\n\t\tfor (let byte of this) {\n\t\t\tvalue = (value << 8n) + BigInt(byte)\n\t\t}\n\t\treturn value\n\t}\n\n\tpublic readonly toSignedBigint = () => {\n\t\tconst unsignedValue = this.toUnsignedBigint()\n\t\treturn Bytes.twosComplement(unsignedValue, this.length * 8)\n\t}\n\n\tpublic readonly equals = (other: { length: number, [i: number]: number } | undefined | null): boolean => {\n\t\tif (other === undefined || other === null) return false\n\t\tif (this.length !== other.length) return false\n\t\tfor (let i = 0; i < this.length; ++i) {\n\t\t\tif (this[i] !== other[i]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\t// this is important TypeScript magic whose provenance and purpose has been lost to time\n\tpublic static get [Symbol.species]() { return Uint8Array }\n\n\tprivate static twosComplement(value: bigint, numberOfBits: number): bigint {\n\t\tconst mask = 2n ** (BigInt(numberOfBits) - 1n) - 1n\n\t\treturn (value & mask) - (value & ~mask)\n\t}\n}\n\nexport type Encodable = EncodablePrimitive | EncodableTuple | EncodableArray\nexport type EncodablePrimitive = Uint8Array | string | boolean | bigint\nexport interface EncodableTuple { readonly [x: string]: Encodable }\nexport interface EncodableArray extends ReadonlyArray<Encodable> { }\n\nexport type RawHash = string\nexport type RawQuantity = string\nexport type RawBlockTag = string\nexport type RawAddress = string\nexport type RawData = string\n\nexport interface RawLog {\n\treadonly blockHash: RawHash\n\treadonly blockNumber: RawQuantity\n\treadonly transactionHash: RawHash\n\treadonly transactionIndex: RawQuantity\n\treadonly logIndex: RawQuantity\n\treadonly address: RawAddress\n\treadonly topics: Array<RawHash>\n\treadonly data: RawData\n}\n\nexport interface RawTransactionReceipt {\n\treadonly blockHash: RawHash\n\treadonly blockNumber: RawQuantity\n\treadonly transactionHash: RawHash\n\treadonly transactionIndex: RawQuantity\n\treadonly from: RawAddress\n\treadonly to: RawAddress | null\n\treadonly contractAddress: RawAddress | null\n\treadonly cumulativeGasUsed: RawQuantity\n\treadonly gasUsed: RawQuantity\n\treadonly logs: Array<RawLog>\n\treadonly logsBloom: RawData\n\treadonly status: RawQuantity\n}\n\nexport interface RawTransaction {\n\treadonly blockHash: RawHash | null\n\treadonly blockNumber: RawQuantity | null\n\treadonly hash: RawHash\n\treadonly transactionIndex: RawQuantity | null\n\treadonly from: RawAddress\n\treadonly to: RawAddress | null\n\treadonly value: RawQuantity\n\treadonly input: RawData\n\treadonly nonce: RawQuantity\n\treadonly gas: RawQuantity\n\treadonly gasPrice: RawQuantity\n\treadonly r: RawQuantity\n\treadonly s: RawQuantity\n\treadonly v: RawQuantity\n}\n\nexport interface RawBlock {\n\treadonly hash: RawHash | null\n\treadonly number: RawQuantity | null\n\treadonly nonce: RawData | null | undefined\n\treadonly logsBloom: RawData | null\n\treadonly parentHash: RawHash\n\treadonly sha3Uncles: RawHash\n\treadonly transactionsRoot: RawData\n\treadonly stateRoot: RawData\n\treadonly receiptsRoot: RawData\n\treadonly miner: RawAddress\n\treadonly difficulty: RawQuantity\n\treadonly totalDifficulty: RawQuantity\n\treadonly extraData: RawData\n\treadonly size: RawQuantity\n\treadonly gasLimit: RawQuantity\n\treadonly gasUsed: RawQuantity\n\treadonly timestamp: RawQuantity\n\treadonly mixHash: RawHash | undefined\n\treadonly transactions: Array<RawTransaction | RawHash>\n\treadonly uncles: Array<RawHash>\n}\n\nexport interface RawTypedData {\n\treadonly types: {\n\t\treadonly EIP712Domain: Array<{ name: string, type: string }>\n\t\treadonly [type: string]: Array<{ name: string, type: string }>\n\t}\n\treadonly primaryType: string\n\treadonly domain: unknown\n\treadonly message: unknown\n}\n\nexport interface RawMerklePatritiaProof {\n\tbalance: RawQuantity\n\tcodeHash: RawHash\n\tnonce: RawQuantity\n\tstorageHash: RawHash\n\taccountProof: Array<RawData>\n\tstorageProof: Array<{\n\t\tkey: RawQuantity\n\t\t// https://github.com/NethermindEth/nethermind/pull/1987\n\t\tvalue: RawQuantity | null\n\t\tproof: Array<RawData>\n\t}>\n}\n\nexport interface RawOffChainTransaction {\n\treadonly from: RawAddress\n\treadonly to: RawAddress | null\n\treadonly value: RawQuantity\n\treadonly data: RawData\n\treadonly gas: RawQuantity | null\n\treadonly gasPrice: RawQuantity\n}\n\nexport interface RawOnChainTransaction extends RawOffChainTransaction {\n\treadonly nonce: RawQuantity\n}\n\nexport interface RawSignedTransaction {\n\treadonly from: RawAddress\n\treadonly to: RawAddress | null\n\treadonly value: RawQuantity\n\treadonly input: RawData\n\treadonly nonce: RawQuantity\n\treadonly gas: RawQuantity\n\treadonly gasPrice: RawQuantity\n\treadonly r: RawQuantity\n\treadonly s: RawQuantity\n\treadonly v: RawQuantity\n}\n\nexport interface ILog {\n\treadonly blockHash: bigint\n\treadonly blockNumber: bigint\n\treadonly transactionHash: bigint\n\treadonly transactionIndex: bigint\n\treadonly logIndex: bigint\n\treadonly address: bigint\n\treadonly topics: Array<bigint>\n\treadonly data: Uint8Array\n}\n\nexport class Log implements ILog {\n\tpublic readonly blockHash: bigint\n\tpublic readonly blockNumber: bigint\n\tpublic readonly transactionHash: bigint\n\tpublic readonly transactionIndex: bigint\n\tpublic readonly logIndex: bigint\n\tpublic readonly address: bigint\n\tpublic readonly topics: Array<bigint>\n\tpublic readonly data: Bytes\n\tpublic constructor(raw: RawLog) {\n\t\tthis.blockHash = BigInt(raw.blockHash)\n\t\tthis.blockNumber = BigInt(raw.blockNumber)\n\t\tthis.transactionHash = BigInt(raw.transactionHash)\n\t\tthis.transactionIndex = BigInt(raw.transactionIndex)\n\t\tthis.logIndex = BigInt(raw.logIndex)\n\t\tthis.address = BigInt(raw.address)\n\t\tthis.topics = raw.topics.map(x => BigInt(x))\n\t\tthis.data = Bytes.fromHexString(raw.data)\n\t}\n}\n\nexport interface ITransactionReceipt {\n\treadonly blockHash: bigint\n\treadonly blockNumber: bigint\n\treadonly hash: bigint\n\treadonly index: bigint\n\treadonly from: bigint\n\treadonly to: bigint | null\n\treadonly contractAddress: bigint | null\n\treadonly cumulativeGasUsed: bigint\n\treadonly gasUsed: bigint\n\treadonly logs: Array<ILog>\n\treadonly logsBloom: bigint\n\treadonly status: boolean\n}\n\nexport class TransactionReceipt implements ITransactionReceipt {\n\tpublic readonly blockHash: bigint\n\tpublic readonly blockNumber: bigint\n\tpublic readonly hash: bigint\n\tpublic readonly index: bigint\n\tpublic readonly from: bigint\n\tpublic readonly to: bigint | null\n\tpublic readonly contractAddress: bigint | null\n\tpublic readonly cumulativeGasUsed: bigint\n\tpublic readonly gasUsed: bigint\n\tpublic readonly logs: Array<Log>\n\tpublic readonly logsBloom: bigint\n\tpublic readonly status: boolean\n\tpublic constructor(raw: RawTransactionReceipt) {\n\t\tthis.blockHash = BigInt(raw.blockHash)\n\t\tthis.blockNumber = BigInt(raw.blockNumber)\n\t\tthis.hash = BigInt(raw.transactionHash)\n\t\tthis.index = BigInt(raw.transactionIndex)\n\t\tthis.from = BigInt(raw.from)\n\t\tthis.to = (raw.to) ? BigInt(raw.to!) : null\n\t\tthis.contractAddress = (raw.contractAddress) ? BigInt(raw.contractAddress) : null\n\t\tthis.cumulativeGasUsed = BigInt(raw.cumulativeGasUsed)\n\t\tthis.gasUsed = BigInt(raw.gasUsed)\n\t\tthis.logs = raw.logs.map(x => new Log(x))\n\t\tthis.logsBloom = BigInt(raw.logsBloom)\n\t\tthis.status = !!Number.parseInt(raw.status, 16)\n\t}\n}\n\nexport interface ITransaction {\n\treadonly blockHash: bigint | null\n\treadonly blockNumber: bigint | null\n\treadonly hash: bigint\n\treadonly index: bigint | null\n\treadonly from: bigint\n\treadonly to: bigint | null\n\treadonly value: bigint\n\treadonly data: Uint8Array\n\treadonly nonce: bigint\n\treadonly gas: bigint\n\treadonly gasPrice: bigint\n\treadonly r: bigint\n\treadonly s: bigint\n\treadonly v: bigint\n}\n\nexport class Transaction implements ITransaction {\n\tpublic readonly blockHash: bigint | null\n\tpublic readonly blockNumber: bigint | null\n\tpublic readonly hash: bigint\n\tpublic readonly index: bigint | null\n\tpublic readonly from: bigint\n\tpublic readonly to: bigint | null\n\tpublic readonly value: bigint\n\tpublic readonly data: Bytes\n\tpublic readonly nonce: bigint\n\tpublic readonly gas: bigint\n\tpublic readonly gasPrice: bigint\n\tpublic readonly r: bigint\n\tpublic readonly s: bigint\n\tpublic readonly v: bigint\n\tpublic constructor(raw: RawTransaction) {\n\t\tthis.blockHash = (raw.blockHash !== null) ? BigInt(raw.blockHash) : null\n\t\tthis.blockNumber = (raw.blockNumber !== null) ? BigInt(raw.blockNumber) : null\n\t\tthis.hash = BigInt(raw.hash)\n\t\tthis.index = (raw.transactionIndex !== null) ? BigInt(raw.transactionIndex) : null\n\t\tthis.from = BigInt(raw.from)\n\t\tthis.to = (raw.to !== null) ? BigInt(raw.to) : null\n\t\tthis.value = BigInt(raw.value)\n\t\tthis.data = Bytes.fromHexString(raw.input)\n\t\tthis.nonce = BigInt(raw.nonce)\n\t\tthis.gas = BigInt(raw.gas)\n\t\tthis.gasPrice = BigInt(raw.gasPrice)\n\t\tthis.r = BigInt(raw.r)\n\t\tthis.s = BigInt(raw.s)\n\t\tthis.v = BigInt(raw.v)\n\t}\n}\n\nexport interface IBlock {\n\treadonly hash: bigint | null\n\treadonly number: bigint | null\n\treadonly nonce: bigint | null\n\treadonly logsBloom: bigint | null\n\treadonly parentHash: bigint\n\treadonly sha3Uncles: bigint\n\treadonly transactionsRoot: bigint\n\treadonly stateRoot: bigint\n\treadonly receiptsRoot: bigint\n\treadonly miner: bigint\n\treadonly difficulty: bigint\n\treadonly totalDifficulty: bigint\n\treadonly extraData: Uint8Array\n\treadonly size: bigint\n\treadonly gasLimit: bigint\n\treadonly gasUsed: bigint\n\treadonly timestamp: Date\n\treadonly mixHash: bigint | null\n\treadonly transactions: Array<ITransaction | bigint>\n\treadonly uncles: Array<bigint>\n}\n\nexport class Block implements IBlock {\n\tpublic readonly hash: bigint | null\n\tpublic readonly number: bigint | null\n\t/** Will be null for OpenEthereum Proof of Authority networks. */\n\tpublic readonly nonce: bigint | null\n\tpublic readonly logsBloom: bigint | null\n\tpublic readonly parentHash: bigint\n\tpublic readonly sha3Uncles: bigint\n\tpublic readonly transactionsRoot: bigint\n\tpublic readonly stateRoot: bigint\n\tpublic readonly receiptsRoot: bigint\n\tpublic readonly miner: bigint\n\tpublic readonly difficulty: bigint\n\tpublic readonly totalDifficulty: bigint\n\tpublic readonly extraData: Bytes\n\tpublic readonly size: bigint\n\tpublic readonly gasLimit: bigint\n\tpublic readonly gasUsed: bigint\n\tpublic readonly timestamp: Date\n\t/** Will be null for OpenEthereum Proof of Authority networks. */\n\tpublic readonly mixHash: bigint | null\n\tpublic readonly transactions: Array<Transaction | bigint>\n\tpublic readonly uncles: Array<bigint>\n\tpublic constructor(raw: RawBlock) {\n\t\tthis.hash = (raw.hash !== null) ? BigInt(raw.hash) : null\n\t\tthis.number = (raw.number !== null && raw.number) ? BigInt(raw.number) : null\n\t\tthis.nonce = (raw.nonce !== null && raw.nonce !== undefined) ? BigInt(raw.nonce) : null\n\t\tthis.logsBloom = (raw.logsBloom !== null) ? BigInt(raw.logsBloom) : null\n\t\tthis.parentHash = BigInt(raw.parentHash)\n\t\tthis.sha3Uncles = BigInt(raw.sha3Uncles)\n\t\tthis.transactionsRoot = BigInt(raw.transactionsRoot)\n\t\tthis.stateRoot = BigInt(raw.stateRoot)\n\t\tthis.receiptsRoot = BigInt(raw.receiptsRoot)\n\t\tthis.miner = BigInt(raw.miner)\n\t\tthis.difficulty = BigInt(raw.difficulty)\n\t\tthis.totalDifficulty = BigInt(raw.totalDifficulty)\n\t\tthis.extraData = Bytes.fromHexString(raw.extraData)\n\t\tthis.size = BigInt(raw.size)\n\t\tthis.gasLimit = BigInt(raw.gasLimit)\n\t\tthis.gasUsed = BigInt(raw.gasUsed)\n\t\tthis.timestamp = new Date(Number.parseInt(raw.timestamp) * 1000)\n\t\tthis.mixHash = (raw.mixHash !== undefined) ? BigInt(raw.mixHash) : null\n\t\tthis.transactions = raw.transactions.map(x => (typeof x === 'string') ? BigInt(x) : new Transaction(x))\n\t\tthis.uncles = raw.uncles.map(x => BigInt(x))\n\t}\n}\n\nexport class MerklePatritiaProof {\n\tbalance: bigint\n\tcodeHash: bigint\n\tnonce: bigint\n\tstorageHash: bigint\n\taccountProof: readonly Bytes[]\n\tstorageProof: readonly {\n\t\tkey: bigint\n\t\tvalue: bigint\n\t\tproof: readonly Bytes[]\n\t}[]\n\tconstructor(raw: RawMerklePatritiaProof) {\n\t\tthis.balance = BigInt(raw.balance)\n\t\tthis.codeHash = BigInt(raw.codeHash)\n\t\tthis.nonce = BigInt(raw.nonce)\n\t\tthis.storageHash = BigInt(raw.storageHash)\n\t\tthis.accountProof = raw.accountProof.map(x => Bytes.fromHexString(x))\n\t\tthis.storageProof = raw.storageProof.map(x => ({\n\t\t\tkey: BigInt(x.key),\n\t\t\tvalue: BigInt(x.value || '0x0'),\n\t\t\tproof: x.proof.map(y => Bytes.fromHexString(y)),\n\t\t}))\n\t}\n}\n\nexport interface ISignature {\n\treadonly r: bigint\n\treadonly s: bigint\n\treadonly v: bigint\n}\n\nexport interface IOffChainTransaction {\n\treadonly from: bigint\n\treadonly to: bigint | null\n\treadonly value: bigint\n\treadonly data: Uint8Array\n\treadonly gasLimit: bigint | null\n\treadonly gasPrice: bigint\n}\n\nexport interface IOnChainTransaction extends IOffChainTransaction {\n\treadonly gasLimit: bigint\n\treadonly nonce: bigint\n}\n\nexport interface IUnsignedTransaction extends IOnChainTransaction {\n\treadonly chainId: bigint\n}\n\nexport interface ISignedTransaction extends IOnChainTransaction, ISignature {\n}\n\nexport class SignedTransaction implements ISignedTransaction {\n\tpublic readonly from: bigint\n\tpublic readonly to: bigint | null\n\tpublic readonly value: bigint\n\tpublic readonly data: Uint8Array\n\tpublic readonly gasPrice: bigint\n\tpublic readonly gasLimit: bigint\n\tpublic readonly nonce: bigint\n\tpublic readonly r: bigint\n\tpublic readonly s: bigint\n\tpublic readonly v: bigint\n\tpublic constructor(raw: RawSignedTransaction) {\n\t\tthis.from = BigInt(raw.from)\n\t\tthis.to = (raw.to !== null) ? BigInt(raw.to) : null\n\t\tthis.value = BigInt(raw.value)\n\t\tthis.data = Bytes.fromHexString(raw.input)\n\t\tthis.nonce = BigInt(raw.nonce)\n\t\tthis.gasLimit = BigInt(raw.gas)\n\t\tthis.gasPrice = BigInt(raw.gasPrice)\n\t\tthis.r = BigInt(raw.r)\n\t\tthis.s = BigInt(raw.s)\n\t\tthis.v = BigInt(raw.v)\n\t}\n}\n\nexport function wireEncodeByteArray(bytes: ArrayLike<number>): string {\n\tlet result = ''\n\tfor (let i = 0; i < bytes.length; ++i) {\n\t\tresult += ('0' + bytes[i].toString(16)).slice(-2)\n\t}\n\treturn `0x${result}`\n}\n\nexport function wireEncodeNumber(value: number | bigint, padding: number = 0): RawQuantity {\n\tif (value < 0) throw new Error(`Wire encoded values must be positive.  Received: ${value}`)\n\tif (typeof value === 'number' && value > 2**52) throw new Error(`Wire encoded number values cannot be bigger than ${2**52}.  Received: ${value}`)\n\tif (typeof value === 'bigint' && value >= 2**256) throw new Error(`Wire encoded bigint values must be smaller than ${2n**256n}.  Received: ${value}`)\n\treturn `0x${value.toString(16).padStart(padding, '0')}`\n}\n\nexport type BlockTag = 'latest' | 'earliest' | 'pending' | bigint\nexport function wireEncodeBlockTag(tag: BlockTag): RawBlockTag { return (typeof tag === 'string') ? tag : wireEncodeNumber(tag) }\n\nexport function wireEncodeOffChainTransaction(transaction: IOffChainTransaction): RawOffChainTransaction {\n\treturn {\n\t\tfrom: wireEncodeNumber(transaction.from, 40),\n\t\tto: transaction.to ? wireEncodeNumber(transaction.to, 40) : null,\n\t\tvalue: wireEncodeNumber(transaction.value),\n\t\tdata: wireEncodeByteArray(transaction.data),\n\t\tgas: transaction.gasLimit ? wireEncodeNumber(transaction.gasLimit) : null,\n\t\tgasPrice: wireEncodeNumber(transaction.gasPrice),\n\t}\n}\n\nexport function wireEncodeOnChainTransaction(transaction: IOnChainTransaction): RawOnChainTransaction {\n\treturn {\n\t\t...wireEncodeOffChainTransaction(transaction),\n\t\tnonce: wireEncodeNumber(transaction.nonce),\n\t}\n}\n\nexport type JsonRpcMethod = 'eth_accounts' | 'eth_blockNumber' | 'eth_call' | 'eth_chainId' | 'eth_coinbase' | 'eth_estimateGas' | 'eth_gasPrice' | 'eth_getBalance' | 'eth_getBlockByHash' | 'eth_getBlockByNumber' | 'eth_getBlockTransactionCountByHash' | 'eth_getBlockTransactionCountByNumber' | 'eth_getCode' | 'eth_getLogs' | 'eth_getProof' | 'eth_getStorageAt' | 'eth_getTransactionByBlockHashAndIndex' | 'eth_getTransactionByBlockNumberAndIndex' | 'eth_getTransactionByHash' | 'eth_getTransactionCount' | 'eth_getTransactionReceipt' | 'eth_getUncleByBlockHashAndIndex' | 'eth_getUncleByBlockNumberAndIndex' | 'eth_getUncleCountByBlockHash' | 'eth_getUncleCountByBlockNumber' | 'eth_protocolVersion' | 'eth_sendRawTransaction' | 'eth_sendTransaction' | 'eth_sign' | 'eth_signTransaction' | 'eth_signTypedData' | 'eth_syncing'\nexport interface IJsonRpcRequest<TMethod extends JsonRpcMethod, TParams extends Array<unknown>> {\n\treadonly jsonrpc: '2.0'\n\treadonly id: string | number | null\n\treadonly method: TMethod\n\treadonly params?: TParams\n}\nexport interface IJsonRpcSuccess<TResult> {\n\treadonly jsonrpc: '2.0'\n\treadonly id: string | number | null\n\treadonly result: TResult\n}\nexport interface IJsonRpcError {\n\treadonly jsonrpc: '2.0'\n\treadonly id: string | number | null\n\treadonly error: {\n\t\treadonly code: number\n\t\treadonly message: string\n\t\treadonly data?: unknown\n\t}\n}\nexport type IJsonRpcResponse<T> = IJsonRpcSuccess<T> | IJsonRpcError\nexport function validateJsonRpcResponse<T>(response: any): response is IJsonRpcResponse<T> {\n\tif (response.jsonrpc !== '2.0'\n\t\t|| (typeof response.id !== 'string' && typeof response.id !== 'number' && response.id !== null)\n\t\t|| ('result' in response && 'error' in response)\n\t\t|| (!('result' in response) && !('error' in response))\n\t\t|| (response.error && typeof response.error.code !== 'number')\n\t\t|| (response.error && typeof response.error.message !== 'string'))\n\t\tthrow new Error(`Expected JSON-RPC response, received something else.\\n${JSON.stringify(response)}`)\n\treturn true\n}\nexport function isJsonRpcSuccess<T>(response: IJsonRpcResponse<T>): response is IJsonRpcSuccess<T> {\n\treturn !!(response as IJsonRpcSuccess<T>).result && !(response as IJsonRpcError).error\n}\nexport function isJsonRpcError<T>(response: IJsonRpcResponse<T>): response is IJsonRpcError {\n\treturn !!(response as IJsonRpcError).error && !(response as IJsonRpcSuccess<T>).result\n}\n\nexport namespace Rpc {\n\texport namespace Eth {\n\t\texport namespace Accounts {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_accounts', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<Array<RawData>> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(public readonly id: string | number | null) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_accounts',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Array<bigint>\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = raw.result.map(x => BigInt(x))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace BlockNumber {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_blockNumber', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(public readonly id: string | number | null) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_blockNumber',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace Call {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_call', [RawOffChainTransaction, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawData> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transaction: IOffChainTransaction,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_call',\n\t\t\t\t\tparams: [ wireEncodeOffChainTransaction(this.transaction), wireEncodeBlockTag(this.blockTag) ],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: Bytes\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = Bytes.fromHexString(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace ChainId {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_chainId', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(public readonly id: string | number | null) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_chainId',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tconst result = raw.result ? BigInt(raw.result) : null\n\t\t\t\t\tif (result === null) throw new Error(`eth_chainId returned null`)\n\t\t\t\t\tthis.result = result\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace Coinbase {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_coinbase', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawAddress> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(public readonly id: string | number | null) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_coinbase',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = raw !== null ? BigInt(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace EstimateGas {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_estimateGas', [RawOffChainTransaction]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transaction: IOffChainTransaction,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_estimateGas',\n\t\t\t\t\tparams: [ wireEncodeOffChainTransaction(this.transaction) ],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GasPrice {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_gasPrice', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(public readonly id: string | number | null) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_gasPrice',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetBalance {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getBalance', [RawAddress, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly address: bigint,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getBalance',\n\t\t\t\t\tparams: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetBlockByHash {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getBlockByHash', [RawHash, boolean]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawBlock | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly hash: bigint,\n\t\t\t\t\tpublic readonly fullTransactions: boolean = false,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getBlockByHash',\n\t\t\t\t\tparams: [wireEncodeNumber(this.hash, 64), this.fullTransactions],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: Block | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Block(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetBlockByNumber {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getBlockByNumber', [RawBlockTag, boolean]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawBlock | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly fullTransactions: boolean = false,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getBlockByNumber',\n\t\t\t\t\tparams: [wireEncodeBlockTag(this.blockTag), this.fullTransactions],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: Block | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Block(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetBlockTransactionCountByHash {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getBlockTransactionCountByHash', [RawHash]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockHash: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getBlockTransactionCountByHash',\n\t\t\t\t\tparams: [wireEncodeNumber(this.blockHash, 64)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetBlockTransactionCountByNumber {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getBlockTransactionCountByNumber', [RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getBlockTransactionCountByNumber',\n\t\t\t\t\tparams: [wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetCode {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getCode', [RawAddress, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawData> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly address: bigint,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getCode',\n\t\t\t\t\tparams: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: Bytes\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = Bytes.fromHexString(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetLogs {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getLogs', [{ address: RawAddress | Array<RawAddress>, topics: Array<RawHash> } & ({ fromBlock: RawBlockTag, toBlock: RawBlockTag } | { blockHash: RawHash })]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<Array<RawLog>> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tid: string | number | null,\n\t\t\t\t\tcriteria: CriteriaTag,\n\t\t\t\t)\n\t\t\t\tpublic constructor(\n\t\t\t\t\tid: string | number | null,\n\t\t\t\t\tcriteria: CriteriaHash,\n\t\t\t\t)\n\t\t\t\tpublic constructor(\n\t\t\t\t\tid: string | number | null,\n\t\t\t\t\tcriteria: Criteria,\n\t\t\t\t)\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly criteria: Criteria\n\t\t\t\t){ }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => {\n\t\t\t\t\tconst address = (Array.isArray(this.criteria.address)) ? this.criteria.address.map(x => wireEncodeNumber(x, 40)) : wireEncodeNumber(this.criteria.address, 40)\n\t\t\t\t\tconst topics = this.criteria.topics.map(x => wireEncodeNumber(x, 64))\n\t\t\t\t\tconst criteriaBlockTarget = this.isCriteriaHash(this.criteria)\n\t\t\t\t\t\t? { blockHash: wireEncodeNumber(this.criteria.blockHash, 64) }\n\t\t\t\t\t\t: { fromBlock: wireEncodeBlockTag(this.criteria.fromBlock), toBlock: wireEncodeBlockTag(this.criteria.toBlock) }\n\t\t\t\t\tconst criteria = { address, topics, ...criteriaBlockTarget }\n\t\t\t\t\treturn {\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: this.id,\n\t\t\t\t\t\tmethod: 'eth_getLogs',\n\t\t\t\t\t\tparams: [criteria],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprivate readonly isCriteriaHash = (criteria: Criteria): criteria is CriteriaHash => !!(criteria as any).blockHash\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: Array<Log>\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = raw.result.map(x => new Log(x))\n\t\t\t\t}\n\t\t\t}\n\t\t\texport interface CriteriaBase {\n\t\t\t\taddress: bigint | Array<bigint>\n\t\t\t\ttopics: Array<bigint>\n\t\t\t}\n\t\t\texport interface CriteriaHash extends CriteriaBase {\n\t\t\t\tblockHash: bigint\n\t\t\t}\n\t\t\texport interface CriteriaTag extends CriteriaBase {\n\t\t\t\tfromBlock: bigint\n\t\t\t\ttoBlock: bigint\n\t\t\t}\n\t\t\ttype Criteria = CriteriaHash | CriteriaTag\n\t\t}\n\t\texport namespace GetProof {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getProof', [RawAddress, Array<RawHash>, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawMerklePatritiaProof> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly address: bigint,\n\t\t\t\t\tpublic readonly storageKeys: readonly bigint[],\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getProof',\n\t\t\t\t\tparams: [wireEncodeNumber(this.address, 40), this.storageKeys.map(x => wireEncodeNumber(x, 64)), wireEncodeBlockTag(this.blockTag)]\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: MerklePatritiaProof\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = new MerklePatritiaProof(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetStorageAt {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getStorageAt', [RawAddress, RawQuantity, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawData> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly address: bigint,\n\t\t\t\t\tpublic readonly index: bigint,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getStorageAt',\n\t\t\t\t\tparams: [wireEncodeNumber(this.address, 40), wireEncodeNumber(this.index), wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetTransactionByBlockHashAndIndex {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByBlockHashAndIndex', [RawHash, RawQuantity]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockHash: bigint,\n\t\t\t\t\tpublic readonly transactionIndex: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getTransactionByBlockHashAndIndex',\n\t\t\t\t\tparams: [wireEncodeNumber(this.blockHash, 64), wireEncodeNumber(this.transactionIndex)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Transaction | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Transaction(raw.result): null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetTransactionByBlockNumberAndIndex {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByBlockNumberAndIndex', [RawBlockTag, RawQuantity]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transactionIndex: bigint,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getTransactionByBlockNumberAndIndex',\n\t\t\t\t\tparams: [wireEncodeBlockTag(this.blockTag), wireEncodeNumber(this.transactionIndex)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Transaction | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Transaction(raw.result): null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetTransactionByHash {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getTransactionByHash', [RawHash]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawTransaction | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transactionHash: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getTransactionByHash',\n\t\t\t\t\tparams: [wireEncodeNumber(this.transactionHash, 64)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Transaction | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Transaction(raw.result): null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetTransactionCount {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getTransactionCount', [RawAddress, RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly address: bigint,\n\t\t\t\t\tpublic readonly blockTag: BlockTag = 'latest',\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getTransactionCount',\n\t\t\t\t\tparams: [wireEncodeNumber(this.address, 40), wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetTransactionReceipt {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getTransactionReceipt', [RawHash]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawTransactionReceipt | null> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transactionHash: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getTransactionReceipt',\n\t\t\t\t\tparams: [wireEncodeNumber(this.transactionHash, 64)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: TransactionReceipt | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new TransactionReceipt(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetUncleByBlockHashAndIndex {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getUncleByBlockHashAndIndex', [RawHash, RawQuantity]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawBlock> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockHash: bigint,\n\t\t\t\t\tpublic readonly uncleIndex: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getUncleByBlockHashAndIndex',\n\t\t\t\t\tparams: [wireEncodeNumber(this.blockHash, 64), wireEncodeNumber(this.uncleIndex)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Block | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Block(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetUncleByBlockNumberAndIndex {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getUncleByBlockNumberAndIndex', [RawBlockTag, RawQuantity]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawBlock> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockTag: BlockTag,\n\t\t\t\t\tpublic readonly uncleIndex: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getUncleByBlockNumberAndIndex',\n\t\t\t\t\tparams: [wireEncodeBlockTag(this.blockTag), wireEncodeNumber(this.uncleIndex)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Block | null\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (raw.result !== null) ? new Block(raw.result) : null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetUncleCountByBlockHash {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getUncleCountByBlockHash', [RawHash]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockHash: bigint,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getUncleCountByBlockHash',\n\t\t\t\t\tparams: [wireEncodeNumber(this.blockHash, 64)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace GetUncleCountByBlockNumber {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_getUncleCountByBlockNumber', [RawBlockTag]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawQuantity> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly blockTag: BlockTag,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_getUncleCountByBlockNumber',\n\t\t\t\t\tparams: [wireEncodeBlockTag(this.blockTag)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace ProtocolVersion {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_protocolVersion', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<string> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_protocolVersion',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: string\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = raw.result\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace SendRawTransaction {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_sendRawTransaction', [RawData]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawHash> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly signedTransaction: Uint8Array,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_sendRawTransaction',\n\t\t\t\t\tparams: [wireEncodeByteArray(this.signedTransaction)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace SendTransaction {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_sendTransaction', [RawOnChainTransaction]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawHash> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transaction: IOnChainTransaction,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_sendTransaction',\n\t\t\t\t\tparams: [wireEncodeOnChainTransaction(this.transaction)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: bigint\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = BigInt(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace Sign {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_sign', [RawAddress, RawData]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<RawHash> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly signerAddress: bigint,\n\t\t\t\t\tpublic readonly data: Uint8Array,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_sign',\n\t\t\t\t\tparams: [wireEncodeNumber(this.signerAddress, 40), wireEncodeByteArray(this.data)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: Bytes\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = Bytes.fromHexString(raw.result)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace SignTransaction {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_signTransaction', [RawOnChainTransaction]> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<{raw:RawData, tx: RawSignedTransaction}> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t\tpublic readonly transaction: IOnChainTransaction,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_signTransaction',\n\t\t\t\t\tparams: [wireEncodeOnChainTransaction(this.transaction)],\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: {\n\t\t\t\t\tdecodedTransaction: ISignedTransaction\n\t\t\t\t\tencodedTransaction: Uint8Array\n\t\t\t\t}\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = {\n\t\t\t\t\t\tdecodedTransaction: new SignedTransaction(raw.result.tx),\n\t\t\t\t\t\tencodedTransaction: Bytes.fromHexString(raw.result.raw),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport namespace Syncing {\n\t\t\texport interface RawRequest extends IJsonRpcRequest<'eth_syncing', []> { }\n\t\t\texport interface RawResponse extends IJsonRpcSuccess<false | { readonly currentBlock: RawQuantity, readonly highestBlock: RawQuantity, readonly startingBlock: RawQuantity }> { }\n\t\t\texport class Request {\n\t\t\t\tpublic constructor(\n\t\t\t\t\tpublic readonly id: string | number | null,\n\t\t\t\t) { }\n\t\t\t\tpublic readonly wireEncode = (): RawRequest => ({\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.id,\n\t\t\t\t\tmethod: 'eth_syncing',\n\t\t\t\t})\n\t\t\t}\n\t\t\texport class Response {\n\t\t\t\tpublic readonly id: string | number | null\n\t\t\t\tpublic readonly result: false | { readonly currentBlock: bigint, readonly highestBlock: bigint, readonly startingBlock: bigint }\n\t\t\t\tpublic constructor(raw: RawResponse) {\n\t\t\t\t\tthis.id = raw.id\n\t\t\t\t\tthis.result = (typeof raw.result === 'boolean') ? raw.result : {\n\t\t\t\t\t\tcurrentBlock: BigInt(raw.result.currentBlock),\n\t\t\t\t\t\thighestBlock: BigInt(raw.result.highestBlock),\n\t\t\t\t\t\tstartingBlock: BigInt(raw.result.startingBlock),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype DropFirst<T extends any[]> = ((...t: T) => void) extends ((x: any, ...u: infer U) => void) ? U : never\ntype ResultType<T extends { readonly result: unknown }> = T extends { readonly result: infer R } ? R : never\ntype RpcMethod<\n\tTRequestConstructor extends new (id: string | number | null, ...args: any[]) => { wireEncode: () => IJsonRpcRequest<JsonRpcMethod, any[]> },\n\tTResponseConstructor extends new (rawResponse: IJsonRpcSuccess<any>) => { readonly result: any },\n> = (...args: DropFirst<ConstructorParameters<TRequestConstructor>>) => Promise<ResultType<InstanceType<TResponseConstructor>>>\ntype MakeRequired<T, K extends keyof T> = T & { [Key in K]-?: T[Key] }\n\nexport interface JsonRpc {\n\treadonly sendEth: (destination: bigint, amount: bigint) => Promise<TransactionReceipt>\n\treadonly deployContract: (bytecode: Uint8Array, value?: bigint) => Promise<bigint>\n\treadonly onChainContractCall: (transaction: MakeRequired<Partial<IOnChainTransaction>, 'to'|'data'>) => Promise<TransactionReceipt>\n\treadonly offChainContractCall: (transaction: MakeRequired<Partial<IOffChainTransaction>, 'to'|'data'>) => Promise<Bytes>\n\treadonly remoteProcedureCall: <\n\t\tTRawRequest extends IJsonRpcRequest<JsonRpcMethod, Array<any>>,\n\t\tTRawResponse extends IJsonRpcSuccess<any>\n\t>(request: TRawRequest) => Promise<TRawResponse>\n\n\treadonly call: RpcMethod<typeof Rpc.Eth.Call.Request, typeof Rpc.Eth.Call.Response>\n\treadonly coinbase: RpcMethod<typeof Rpc.Eth.Coinbase.Request, typeof Rpc.Eth.Coinbase.Response>\n\treadonly estimateGas: RpcMethod<typeof Rpc.Eth.EstimateGas.Request, typeof Rpc.Eth.EstimateGas.Response>\n\treadonly getAccounts: RpcMethod<typeof Rpc.Eth.Accounts.Request, typeof Rpc.Eth.Accounts.Response>\n\treadonly getBalance: RpcMethod<typeof Rpc.Eth.GetBalance.Request, typeof Rpc.Eth.GetBalance.Response>\n\treadonly getBlockByHash: RpcMethod<typeof Rpc.Eth.GetBlockByHash.Request, typeof Rpc.Eth.GetBlockByHash.Response>\n\treadonly getBlockByNumber: RpcMethod<typeof Rpc.Eth.GetBlockByNumber.Request, typeof Rpc.Eth.GetBlockByNumber.Response>\n\treadonly getBlockNumber: RpcMethod<typeof Rpc.Eth.BlockNumber.Request, typeof Rpc.Eth.BlockNumber.Response>\n\treadonly getBlockTransactionCountByHash: RpcMethod<typeof Rpc.Eth.GetBlockTransactionCountByHash.Request, typeof Rpc.Eth.GetBlockTransactionCountByHash.Response>\n\treadonly getBlockTransactionCountByNumber: RpcMethod<typeof Rpc.Eth.GetBlockTransactionCountByNumber.Request, typeof Rpc.Eth.GetBlockTransactionCountByNumber.Response>\n\treadonly getChainId: RpcMethod<typeof Rpc.Eth.ChainId.Request, typeof Rpc.Eth.ChainId.Response>\n\treadonly getCode: RpcMethod<typeof Rpc.Eth.GetCode.Request, typeof Rpc.Eth.GetCode.Response>\n\treadonly getGasPrice: RpcMethod<typeof Rpc.Eth.GasPrice.Request, typeof Rpc.Eth.GasPrice.Response>\n\treadonly getLogs: RpcMethod<typeof Rpc.Eth.GetLogs.Request, typeof Rpc.Eth.GetLogs.Response>\n\treadonly getProof: RpcMethod<typeof Rpc.Eth.GetProof.Request, typeof Rpc.Eth.GetProof.Response>\n\treadonly getStorageAt: RpcMethod<typeof Rpc.Eth.GetStorageAt.Request, typeof Rpc.Eth.GetStorageAt.Response>\n\treadonly getTransactionByBlockHashAndIndex: RpcMethod<typeof Rpc.Eth.GetTransactionByBlockHashAndIndex.Request, typeof Rpc.Eth.GetTransactionByBlockHashAndIndex.Response>\n\treadonly getTransactionByBlockNumberAndIndex: RpcMethod<typeof Rpc.Eth.GetTransactionByBlockNumberAndIndex.Request, typeof Rpc.Eth.GetTransactionByBlockNumberAndIndex.Response>\n\treadonly getTransactionByHash: RpcMethod<typeof Rpc.Eth.GetTransactionByHash.Request, typeof Rpc.Eth.GetTransactionByHash.Response>\n\treadonly getTransactionCount: RpcMethod<typeof Rpc.Eth.GetTransactionCount.Request, typeof Rpc.Eth.GetTransactionCount.Response>\n\treadonly getTransactionReceipt: RpcMethod<typeof Rpc.Eth.GetTransactionReceipt.Request, typeof Rpc.Eth.GetTransactionReceipt.Response>\n\treadonly getUncleByBlockHashAndIndex: RpcMethod<typeof Rpc.Eth.GetUncleByBlockHashAndIndex.Request, typeof Rpc.Eth.GetUncleByBlockHashAndIndex.Response>\n\treadonly getUncleByBlockNumberAndIndex: RpcMethod<typeof Rpc.Eth.GetUncleByBlockNumberAndIndex.Request, typeof Rpc.Eth.GetUncleByBlockNumberAndIndex.Response>\n\treadonly getUncleCountByBlockHash: RpcMethod<typeof Rpc.Eth.GetUncleCountByBlockHash.Request, typeof Rpc.Eth.GetUncleCountByBlockHash.Response>\n\treadonly getUncleCountByBlockNumber: RpcMethod<typeof Rpc.Eth.GetUncleCountByBlockNumber.Request, typeof Rpc.Eth.GetUncleCountByBlockNumber.Response>\n\treadonly getProtocolVersion: RpcMethod<typeof Rpc.Eth.ProtocolVersion.Request, typeof Rpc.Eth.ProtocolVersion.Response>\n\treadonly sendRawTransaction: RpcMethod<typeof Rpc.Eth.SendRawTransaction.Request, typeof Rpc.Eth.SendRawTransaction.Response>\n\treadonly sendTransaction: RpcMethod<typeof Rpc.Eth.SendTransaction.Request, typeof Rpc.Eth.SendTransaction.Response>\n\treadonly signTransaction: RpcMethod<typeof Rpc.Eth.SignTransaction.Request, typeof Rpc.Eth.SignTransaction.Response>\n\treadonly sign: RpcMethod<typeof Rpc.Eth.Sign.Request, typeof Rpc.Eth.Sign.Response>\n\treadonly syncing: RpcMethod<typeof Rpc.Eth.Syncing.Request, typeof Rpc.Eth.Syncing.Response>\n}\n\n// https://github.com/microsoft/TypeScript/issues/31535\ninterface TextEncoder {\n\t/** Returns \"utf-8\". */\n\treadonly encoding: string\n\t/** Returns the result of running UTF-8's encoder. */\n\tencode(input?: string): Uint8Array\n}\ndeclare var TextEncoder: { prototype: TextEncoder; new(): TextEncoder }\n"]}