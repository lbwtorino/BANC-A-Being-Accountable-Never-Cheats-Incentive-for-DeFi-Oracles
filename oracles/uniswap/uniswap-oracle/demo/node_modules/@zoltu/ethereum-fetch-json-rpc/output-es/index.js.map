{"version":3,"file":"index.js","sourceRoot":"","sources":["../source/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bytes, TransactionReceipt, IUnsignedTransaction, IOffChainTransaction, Rpc, IJsonRpcRequest, IJsonRpcError, IJsonRpcSuccess, isJsonRpcError, validateJsonRpcResponse, JsonRpcMethod, IOnChainTransaction, ISignedTransaction, JsonRpc } from '@zoltu/ethereum-types'\nimport { rlpEncode } from './vendor/rlp-encoder/index'\nimport { ErrorWithData } from './error-with-data'\nexport { ErrorWithData }\nimport { sleep } from './sleep'\nimport { stripLeadingZeros } from './utils'\n\ntype FetchResult = {\n\treadonly ok: boolean,\n\treadonly status: number,\n\treadonly statusText: string,\n\tjson: () => Promise<any>,\n\ttext: () => Promise<string>,\n}\ntype FetchOptions = {\n\tmethod: string,\n\tbody: string,\n\theaders: Record<string, string>,\n}\ntype Fetch = (url: string, options: FetchOptions) => Promise<FetchResult>\ntype SignatureLike = {\n\tr: bigint,\n\ts: bigint,\n\tyParity: 'even' | 'odd',\n}\n\nexport interface FetchJsonRpcOptions {\n\tgasPriceInAttoethProvider?: FetchJsonRpc['gasPriceInAttoethProvider']\n\tgasLimitProvider?: FetchJsonRpc['gasLimitProvider']\n\taddressProvider?: FetchJsonRpc['addressProvider']\n\tsignatureProvider?: FetchJsonRpc['signatureProvider']\n\tchainId?: bigint\n}\n\nexport class FetchJsonRpc implements JsonRpc {\n\tpublic readonly gasPriceInAttoethProvider?: () => Promise<bigint>\n\tpublic readonly gasLimitProvider: (transaction: IOffChainTransaction, estimator: (transaction: IOffChainTransaction) => Promise<bigint>) => Promise<bigint>\n\tpublic readonly addressProvider?: () => Promise<bigint>\n\tpublic readonly signatureProvider?: (bytes: Bytes) => Promise<SignatureLike>\n\tprivate readonly chainId: Promise<bigint>\n\n\tpublic constructor(\n\t\tpublic readonly jsonRpcEndpoint: string,\n\t\tpublic readonly fetch: Fetch,\n\t\toptions: FetchJsonRpcOptions,\n\t) {\n\t\tthis.gasPriceInAttoethProvider = options.gasPriceInAttoethProvider\n\t\tthis.gasLimitProvider = options.gasLimitProvider || (async (transaction, estimator) => await estimator(transaction))\n\t\tthis.addressProvider = options.addressProvider\n\t\tthis.signatureProvider = options.signatureProvider\n\t\tthis.chainId = (options.chainId !== undefined) ? Promise.resolve(options.chainId) : this.getChainId()\n\t\tthis.coinbase = (this.addressProvider) ? this.addressProvider : this.makeRequest(Rpc.Eth.Coinbase.Request, Rpc.Eth.Coinbase.Response)\n\t\t// necessary to capture value for async call, since readonly modifier doesn't take effect until after constructor\n\t\tconst getSignerAddress = this.addressProvider\n\t\tthis.getAccounts = (getSignerAddress !== undefined) ? async () => [await getSignerAddress()] : this.makeRequest(Rpc.Eth.Accounts.Request, Rpc.Eth.Accounts.Response)\n\t\tthis.getGasPrice = (this.gasPriceInAttoethProvider) ? this.gasPriceInAttoethProvider : this.makeRequest(Rpc.Eth.GasPrice.Request, Rpc.Eth.GasPrice.Response)\n\n\t\t// silence NodeJS/Chrome warnings about unhandled rejections when we pre-fetch\n\t\tthis.chainId.catch(() => {})\n\t}\n\n\tpublic readonly sendEth = async (destination: bigint, amount: bigint): Promise<TransactionReceipt> => await this.executeTransaction({ to: destination, value: amount })\n\n\tpublic readonly deployContract = async (bytecode: Uint8Array, value?: bigint): Promise<bigint> => (await this.executeTransaction({ to: null, data: bytecode, value: value })).contractAddress!\n\n\tpublic readonly onChainContractCall = async (transaction: PartiallyRequired<IOnChainTransaction, 'to'|'data'>): Promise<TransactionReceipt> => this.executeTransaction(transaction)\n\n\tpublic readonly offChainContractCall = async (transaction: PartiallyRequired<IOffChainTransaction, 'to'|'data'>): Promise<Bytes> => {\n\t\tconst offChainTransaction: IOffChainTransaction = {\n\t\t\tfrom: transaction.from !== undefined ? transaction.from : await this.coinbase().catch(() => null) || 0n,\n\t\t\tto: transaction.to,\n\t\t\tvalue: transaction.value || 0n,\n\t\t\tdata: transaction.data || new Bytes(),\n\t\t\tgasLimit: transaction.gasLimit || 1_000_000_000n,\n\t\t\tgasPrice: transaction.gasPrice || await this.getGasPrice(),\n\t\t}\n\t\treturn await this.call(offChainTransaction)\n\t}\n\n\tprivate readonly executeTransaction = async (transaction: Partial<IUnsignedTransaction> & { to: bigint | null }): Promise<TransactionReceipt> => {\n\t\tconst transactionHash = await this.submitTransaction(transaction)\n\t\tlet receipt = await this.getTransactionReceipt(transactionHash)\n\t\t// TODO: find out if Parity, Geth or MM return a receipt with a null block anymore (docs suggest no)\n\t\twhile (receipt === null || receipt.blockNumber === null) {\n\t\t\tawait sleep(1000)\n\t\t\treceipt = await this.getTransactionReceipt(transactionHash)\n\t\t}\n\t\tif (!receipt.status) throw new Error(`Transaction mined, but failed.`)\n\t\tif (!receipt.contractAddress && !transaction.to) throw new Error(`Contract deployment failed.  Contract address was null.`)\n\t\treturn receipt\n\t}\n\n\tprivate readonly submitTransaction = async (transaction: Partial<IUnsignedTransaction> & { to: bigint | null }): Promise<bigint> => {\n\t\tconst { encodedTransaction } = await this.signTransaction(transaction)\n\t\treturn await this.sendRawTransaction(encodedTransaction)\n\t}\n\n\tprivate readonly makeRequest = <\n\t\t// https://github.com/microsoft/TypeScript/issues/32976 TRequestConstructor should be constrained to constructors that take a string|number|null first parameter\n\t\tTRequestConstructor extends new (...args: any[]) => { wireEncode: () => IJsonRpcRequest<JsonRpcMethod, any[]> },\n\t\tTResponseConstructor extends new (rawResponse: IJsonRpcSuccess<any>) => { result: any },\n\t\tTRequest extends InstanceType<TRequestConstructor>,\n\t\tTResponse extends InstanceType<TResponseConstructor>,\n\t\tTResponseResult extends ResultType<TResponse>,\n\t>(Request: TRequestConstructor, Response: TResponseConstructor) => async (...args: DropFirst<ConstructorParameters<TRequestConstructor>>): Promise<TResponseResult> => {\n\t\tconst request = new Request(0, ...args) as TRequest\n\t\tconst rawRequest = request.wireEncode() as RawRequestType<TRequest>\n\t\tconst rawResponse = await this.remoteProcedureCall(rawRequest) as PickFirst<ConstructorParameters<TResponseConstructor>>\n\t\tconst response = new Response(rawResponse) as TResponse\n\t\treturn response.result as TResponseResult\n\t}\n\n\tpublic readonly call = this.makeRequest(Rpc.Eth.Call.Request, Rpc.Eth.Call.Response)\n\t// see constructor\n\tpublic readonly coinbase: () => Promise<bigint|null>\n\tpublic readonly estimateGas = this.makeRequest(Rpc.Eth.EstimateGas.Request, Rpc.Eth.EstimateGas.Response)\n\t// see constructor\n\tpublic readonly getAccounts: () => Promise<Array<bigint>>\n\tpublic readonly getBalance = this.makeRequest(Rpc.Eth.GetBalance.Request, Rpc.Eth.GetBalance.Response)\n\tpublic readonly getBlockByHash = this.makeRequest(Rpc.Eth.GetBlockByHash.Request, Rpc.Eth.GetBlockByHash.Response)\n\tpublic readonly getBlockByNumber = this.makeRequest(Rpc.Eth.GetBlockByNumber.Request, Rpc.Eth.GetBlockByNumber.Response)\n\tpublic readonly getBlockNumber = this.makeRequest(Rpc.Eth.BlockNumber.Request, Rpc.Eth.BlockNumber.Response)\n\tpublic readonly getBlockTransactionCountByHash = this.makeRequest(Rpc.Eth.GetBlockTransactionCountByHash.Request, Rpc.Eth.GetBlockTransactionCountByHash.Response)\n\tpublic readonly getBlockTransactionCountByNumber = this.makeRequest(Rpc.Eth.GetBlockTransactionCountByNumber.Request, Rpc.Eth.GetBlockTransactionCountByNumber.Response)\n\t// see constructor\n\tpublic readonly getGasPrice: () => Promise<bigint>\n\tpublic readonly getChainId = this.makeRequest(Rpc.Eth.ChainId.Request, Rpc.Eth.ChainId.Response)\n\tpublic readonly getCode = this.makeRequest(Rpc.Eth.GetCode.Request, Rpc.Eth.GetCode.Response)\n\tpublic readonly getLogs = this.makeRequest(Rpc.Eth.GetLogs.Request, Rpc.Eth.GetLogs.Response)\n\tpublic readonly getProof = this.makeRequest(Rpc.Eth.GetProof.Request, Rpc.Eth.GetProof.Response)\n\tpublic readonly getStorageAt = this.makeRequest(Rpc.Eth.GetStorageAt.Request, Rpc.Eth.GetStorageAt.Response)\n\tpublic readonly getTransactionByBlockHashAndIndex = this.makeRequest(Rpc.Eth.GetTransactionByBlockHashAndIndex.Request, Rpc.Eth.GetTransactionByBlockHashAndIndex.Response)\n\tpublic readonly getTransactionByBlockNumberAndIndex = this.makeRequest(Rpc.Eth.GetTransactionByBlockNumberAndIndex.Request, Rpc.Eth.GetTransactionByBlockNumberAndIndex.Response)\n\tpublic readonly getTransactionByHash = this.makeRequest(Rpc.Eth.GetTransactionByHash.Request, Rpc.Eth.GetTransactionByHash.Response)\n\tpublic readonly getTransactionCount = this.makeRequest(Rpc.Eth.GetTransactionCount.Request, Rpc.Eth.GetTransactionCount.Response)\n\t// workaround for Parity returning partial transaction receipts before mining\n\t// public readonly getTransactionReceipt = this.makeRequest(Rpc.Eth.GetTransactionReceipt.Request, Rpc.Eth.GetTransactionReceipt.Response)\n\tpublic readonly getTransactionReceipt = async (transactionHash: bigint): Promise<TransactionReceipt | null> => {\n\t\tconst request = new Rpc.Eth.GetTransactionReceipt.Request(null, transactionHash)\n\t\tconst rawRequest = request.wireEncode()\n\t\tconst rawResponse = await this.remoteProcedureCall(rawRequest)\n\t\tif (rawResponse.result === null || rawResponse.result.blockNumber === null || rawResponse.result.blockHash === null) return null\n\t\tconst response = new Rpc.Eth.GetTransactionReceipt.Response(rawResponse)\n\t\treturn response.result\n\t}\n\tpublic readonly getUncleByBlockHashAndIndex = this.makeRequest(Rpc.Eth.GetUncleByBlockHashAndIndex.Request, Rpc.Eth.GetUncleByBlockHashAndIndex.Response)\n\tpublic readonly getUncleByBlockNumberAndIndex = this.makeRequest(Rpc.Eth.GetUncleByBlockNumberAndIndex.Request, Rpc.Eth.GetUncleByBlockNumberAndIndex.Response)\n\tpublic readonly getUncleCountByBlockHash = this.makeRequest(Rpc.Eth.GetUncleCountByBlockHash.Request, Rpc.Eth.GetUncleCountByBlockHash.Response)\n\tpublic readonly getUncleCountByBlockNumber = this.makeRequest(Rpc.Eth.GetUncleCountByBlockNumber.Request, Rpc.Eth.GetUncleCountByBlockNumber.Response)\n\tpublic readonly getProtocolVersion = this.makeRequest(Rpc.Eth.ProtocolVersion.Request, Rpc.Eth.ProtocolVersion.Response)\n\tpublic readonly sendRawTransaction = this.makeRequest(Rpc.Eth.SendRawTransaction.Request, Rpc.Eth.SendRawTransaction.Response)\n\tpublic readonly sendTransaction = this.submitTransaction\n\tpublic readonly signTransaction = async (transaction: Partial<IUnsignedTransaction> & { to: bigint | null }): Promise<Rpc.Eth.SignTransaction.Response['result']> => {\n\t\tconst gasEstimatingTransaction: IOffChainTransaction = {\n\t\t\tfrom: transaction.from !== undefined ? transaction.from : await this.coinbase().catch(() => null) || 0n,\n\t\t\tto: transaction.to,\n\t\t\tvalue: transaction.value || 0n,\n\t\t\tdata: transaction.data || new Bytes(),\n\t\t\tgasLimit: transaction.gasLimit || 1_000_000_000n,\n\t\t\tgasPrice: transaction.gasPrice || await this.getGasPrice(),\n\t\t}\n\t\tconst unsignedTransaction = {\n\t\t\t...gasEstimatingTransaction,\n\t\t\tgasLimit: transaction.gasLimit || await this.gasLimitProvider(gasEstimatingTransaction, this.estimateGas),\n\t\t\tnonce: transaction.nonce || await this.getTransactionCount(gasEstimatingTransaction.from, 'pending'),\n\t\t\tchainId: await this.chainId,\n\t\t}\n\t\tif (this.signatureProvider === undefined) {\n\t\t\treturn  await this.makeRequest(Rpc.Eth.SignTransaction.Request, Rpc.Eth.SignTransaction.Response)(unsignedTransaction)\n\t\t} else {\n\t\t\tconst rlpEncodedUnsignedTransaction = this.rlpEncodeTransaction(unsignedTransaction)\n\t\t\tconst signature = await this.signatureProvider(rlpEncodedUnsignedTransaction)\n\t\t\tconst v = (signature.yParity === 'even' ? 0n : 1n) + 35n + 2n * unsignedTransaction.chainId\n\t\t\tconst decodedTransaction = {...unsignedTransaction, r: signature.r, s: signature.s, v }\n\t\t\tconst encodedTransaction = this.rlpEncodeTransaction(decodedTransaction)\n\t\t\treturn { decodedTransaction, encodedTransaction }\n\t\t}\n\t}\n\tpublic readonly sign = async (signerAddress: bigint, data: Uint8Array) => {\n\t\tif (this.signatureProvider === undefined) return this.makeRequest(Rpc.Eth.Sign.Request, Rpc.Eth.Sign.Response)(signerAddress, data)\n\t\tif (await this.coinbase() !== signerAddress) throw new Error(`Cannot sign messages for address 0x${signerAddress.toString(16).padStart(40, '0')}`)\n\t\tconst messageToSign = this.mutateMessageForSigning(data)\n\t\tconst signature = await this.signatureProvider(messageToSign)\n\t\treturn this.encodeSignature(signature)\n\t}\n\tpublic readonly syncing = this.makeRequest(Rpc.Eth.Syncing.Request, Rpc.Eth.Syncing.Response)\n\n\tpublic readonly remoteProcedureCall = async <\n\t\tTRawRequest extends IJsonRpcRequest<JsonRpcMethod, Array<any>>,\n\t\tTRawResponse extends IJsonRpcSuccess<any>\n\t>(request: TRawRequest): Promise<TRawResponse> => {\n\t\tconst requestBodyJson = JSON.stringify(request)\n\t\tconst response = await this.fetch(this.jsonRpcEndpoint, { method: 'POST', body: requestBodyJson, headers: { 'Content-Type': 'application/json' } })\n\t\tif (!response.ok) throw new ErrorWithData(`${response.status}: ${response.statusText}\\n${response.text()}`, request)\n\t\tconst responseBody: TRawResponse | IJsonRpcError = await response.json()\n\t\tvalidateJsonRpcResponse(responseBody)\n\t\tif (isJsonRpcError(responseBody)) throw new ErrorWithData(this.extractErrorMessage(responseBody.error), { request, code: responseBody.error.code, data: responseBody.error.data })\n\t\treturn responseBody\n\t}\n\n\tprivate readonly rlpEncodeTransaction = (transaction: IUnsignedTransaction | ISignedTransaction): Bytes => {\n\t\tconst toEncode = [\n\t\t\tstripLeadingZeros(Bytes.fromUnsignedInteger(transaction.nonce, 256)),\n\t\t\tstripLeadingZeros(Bytes.fromUnsignedInteger(transaction.gasPrice, 256)),\n\t\t\tstripLeadingZeros(Bytes.fromUnsignedInteger(transaction.gasLimit, 256)),\n\t\t\tstripLeadingZeros(transaction.to !== null ? Bytes.fromUnsignedInteger(transaction.to, 256) : new Uint8Array(0)),\n\t\t\tstripLeadingZeros(Bytes.fromUnsignedInteger(transaction.value, 256)),\n\t\t\tnew Uint8Array(transaction.data),\n\t\t]\n\t\tif (!this.isSignedTransaction(transaction)) {\n\t\t\ttoEncode.push(stripLeadingZeros(Bytes.fromUnsignedInteger(transaction.chainId, 256)))\n\t\t\ttoEncode.push(stripLeadingZeros(new Uint8Array(0)))\n\t\t\ttoEncode.push(stripLeadingZeros(new Uint8Array(0)))\n\t\t} else {\n\t\t\ttoEncode.push(stripLeadingZeros(Bytes.fromUnsignedInteger(transaction.v, 256)))\n\t\t\ttoEncode.push(stripLeadingZeros(Bytes.fromUnsignedInteger(transaction.r, 256)))\n\t\t\ttoEncode.push(stripLeadingZeros(Bytes.fromUnsignedInteger(transaction.s, 256)))\n\t\t}\n\t\treturn Bytes.fromByteArray(rlpEncode(toEncode))\n\t}\n\n\tprivate readonly isSignedTransaction = (transaction: IUnsignedTransaction | ISignedTransaction): transaction is ISignedTransaction => (transaction as any).r !== undefined\n\n\tprivate readonly mutateMessageForSigning = (message: string | Uint8Array): Bytes => {\n\t\tmessage = (typeof message === 'string') ? new TextEncoder().encode(message) : message\n\t\tconst messagePrefix = new TextEncoder().encode(`\\x19Ethereum Signed Message:\\n${message.length.toString(10)}`)\n\t\treturn Bytes.fromByteArray([...messagePrefix, ...message])\n\t}\n\n\tprivate readonly encodeSignature = (signature: SignatureLike): Bytes => {\n\t\tconst v = (signature.yParity === 'even' ? 0n : 1n) + 27n\n\t\tconst rSegment = Bytes.fromUnsignedInteger(signature.r, 256)\n\t\tconst sSegment = Bytes.fromUnsignedInteger(signature.s, 256)\n\t\tconst vSegment = Bytes.fromUnsignedInteger(v, 8)\n\t\treturn Bytes.fromByteArray([...rSegment, ...sSegment, ...vSegment])\n\t}\n\n\tprivate readonly extractErrorMessage = (error: IJsonRpcError['error']): string => {\n\t\tif (typeof error.data !== 'string') return error.message\n\t\t// handle contract revert errors from Parity\n\t\tif (error.data.startsWith('Reverted 0x08c379a0')) {\n\t\t\tconst offset = Number.parseInt(error.data.substr('Reverted 0x08c379a0'.length, 64), 16) * 2\n\t\t\tconst length = Number.parseInt(error.data.substr('Reverted 0x08c379a0'.length + offset, 64), 16) * 2\n\t\t\tconst message = new TextDecoder().decode(Bytes.fromHexString(error.data.substr(19 + offset + 64, length)))\n\t\t\treturn `Contract Error: ${message}`\n\t\t}\n\t\t// handle contract revert errors from Nethermind\n\t\tif (error.data.startsWith('revert: ')) {\n\t\t\tconst message = error.data.substr('revert: '.length)\n\t\t\treturn `Contract Error: ${message}`\n\t\t}\n\t\treturn error.message\n\t}\n}\n\ntype DropFirst<T extends any[]> = ((...t: T) => void) extends ((x: any, ...u: infer U) => void) ? U : never\ntype PickFirst<T extends any[]> = ((...t: T) => void) extends ((x: infer U, ...u: any[]) => void) ? U : never\ntype ResultType<T extends { result: unknown }> = T extends { result: infer R } ? R : never\ntype RawRequestType<T extends { wireEncode: () => IJsonRpcRequest<JsonRpcMethod, unknown[]> }> = T extends { wireEncode: () => infer R } ? R : never\ntype PartiallyRequired<T, K extends keyof T> = { [Key in Exclude<keyof T, K>]?: T[Key] } & { [Key in K]-?: T[Key] }\n// https://github.com/microsoft/TypeScript/issues/31535\ndeclare class TextEncoder { encode(input?: string): Uint8Array }\ndeclare class TextDecoder { decode(input?: Uint8Array): string }\n"]}