import { expect, use as chaiUse} from 'chai'
import chaiBytes from 'chai-bytes'
chaiUse(chaiBytes)
import { unsignedBigintToUint8Array } from '@zoltu/bigint-helpers'
import { rlpEncode, RlpItem } from './index'

// Adapted from https://github.com/ethereum/tests/blob/develop/RLPTests/rlptest.json, this encoder doesn't turn things into byte arrays for you, so the inputs have been pre-converted here
const testCases: { [key: string]: { in: RlpItem, out: string} } = {
	"emptystring": {
		"in": new Uint8Array(0),
		"out": "0x80"
	},
	"bytestring00": {
		"in": new Uint8Array([0x00]),
		"out": "0x00"
	},
	"bytestring01": {
		"in": new Uint8Array([0x01]),
		"out": "0x01"
	},
	"bytestring7F": {
		"in": new Uint8Array([0x7f]),
		"out": "0x7f"
	},
	"shortstring": {
		"in": new Uint8Array([0x64, 0x6f, 0x67]), // "dog"
		"out": "0x83646f67"
	},
	"shortstring2": {
		"in": new Uint8Array([0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69]), // "Lorem ipsum dolor sit amet, consectetur adipisicing eli"
		"out": "0xb74c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e7365637465747572206164697069736963696e6720656c69"
	},
	"longstring": {
		"in": new Uint8Array([0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74]), // "Lorem ipsum dolor sit amet, consectetur adipisicing elit"
		"out": "0xb8384c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e7365637465747572206164697069736963696e6720656c6974"
	},
	"longstring2": {
	"in": new Uint8Array([0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x43, 0x75, 0x72, 0x61, 0x62, 0x69, 0x74, 0x75, 0x72, 0x20, 0x6d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x2c, 0x20, 0x73, 0x75, 0x73, 0x63, 0x69, 0x70, 0x69, 0x74, 0x20, 0x73, 0x65, 0x64, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x73, 0x63, 0x69, 0x70, 0x69, 0x74, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x75, 0x61, 0x64, 0x61, 0x2e, 0x20, 0x44, 0x75, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2c, 0x20, 0x64, 0x69, 0x63, 0x74, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75, 0x2c, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x61, 0x74, 0x20, 0x72, 0x69, 0x73, 0x75, 0x73, 0x2e, 0x20, 0x4d, 0x6f, 0x72, 0x62, 0x69, 0x20, 0x61, 0x20, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x6d, 0x69, 0x20, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x63, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x73, 0x75, 0x73, 0x63, 0x69, 0x70, 0x69, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x20, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x6f, 0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x75, 0x72, 0x70, 0x69, 0x73, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x2c, 0x20, 0x65, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x75, 0x65, 0x72, 0x65, 0x20, 0x75, 0x72, 0x6e, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x6e, 0x65, 0x63, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x69, 0x6e, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x20, 0x73, 0x6f, 0x6c, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x69, 0x6e, 0x2e, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6c, 0x75, 0x6d, 0x20, 0x61, 0x6e, 0x74, 0x65, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x6f, 0x72, 0x63, 0x69, 0x20, 0x6c, 0x75, 0x63, 0x74, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x75, 0x65, 0x72, 0x65, 0x20, 0x63, 0x75, 0x62, 0x69, 0x6c, 0x69, 0x61, 0x20, 0x43, 0x75, 0x72, 0x61, 0x65, 0x3b, 0x20, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x2c, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x69, 0x61, 0x20, 0x6c, 0x61, 0x63, 0x75, 0x73, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x70, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x69, 0x6e, 0x20, 0x61, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x6e, 0x69, 0x62, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x2e, 0x20, 0x41, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x20, 0x6c, 0x75, 0x63, 0x74, 0x75, 0x73, 0x2c, 0x20, 0x61, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x72, 0x75, 0x73, 0x20, 0x65, 0x67, 0x65, 0x73, 0x74, 0x61, 0x73, 0x2e, 0x20, 0x43, 0x75, 0x72, 0x61, 0x62, 0x69, 0x74, 0x75, 0x72, 0x20, 0x61, 0x74, 0x20, 0x6e, 0x69, 0x62, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x2e, 0x20, 0x4e, 0x61, 0x6d, 0x20, 0x62, 0x69, 0x62, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x2c, 0x20, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69, 0x71, 0x75, 0x65, 0x2c, 0x20, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x6f, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x61, 0x72, 0x63, 0x75, 0x2c, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x64, 0x75, 0x6d, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x73, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x20, 0x65, 0x72, 0x6f, 0x73, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x2c, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x20, 0x61, 0x63, 0x20, 0x6f, 0x72, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x73, 0x75, 0x73, 0x2c, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x2c, 0x20, 0x61, 0x74, 0x20, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x63, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x70, 0x61, 0x74]), // "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur mauris magna, suscipit sed vehicula non, iaculis faucibus tortor. Proin suscipit ultricies malesuada. Duis tortor elit, dictum quis tristique eu, ultrices at risus. Morbi a est imperdiet mi ullamcorper aliquet suscipit nec lorem. Aenean quis leo mollis, vulputate elit varius, consequat enim. Nulla ultrices turpis justo, et posuere urna consectetur nec. Proin non convallis metus. Donec tempor ipsum in mauris congue sollicitudin. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse convallis sem vel massa faucibus, eget lacinia lacus tempor. Nulla quis ultricies purus. Proin auctor rhoncus nibh condimentum mollis. Aliquam consequat enim at metus luctus, a eleifend purus egestas. Curabitur at nibh metus. Nam bibendum, neque at auctor tristique, lorem libero aliquet arcu, non interdum tellus lectus sit amet eros. Cras rhoncus, metus ac ornare cursus, dolor justo ultrices metus, at ullamcorper volutpat"
		"out": "0xb904004c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e20437572616269747572206d6175726973206d61676e612c20737573636970697420736564207665686963756c61206e6f6e2c20696163756c697320666175636962757320746f72746f722e2050726f696e20737573636970697420756c74726963696573206d616c6573756164612e204475697320746f72746f7220656c69742c2064696374756d2071756973207472697374697175652065752c20756c7472696365732061742072697375732e204d6f72626920612065737420696d70657264696574206d6920756c6c616d636f7270657220616c6971756574207375736369706974206e6563206c6f72656d2e2041656e65616e2071756973206c656f206d6f6c6c69732c2076756c70757461746520656c6974207661726975732c20636f6e73657175617420656e696d2e204e756c6c6120756c74726963657320747572706973206a7573746f2c20657420706f73756572652075726e6120636f6e7365637465747572206e65632e2050726f696e206e6f6e20636f6e76616c6c6973206d657475732e20446f6e65632074656d706f7220697073756d20696e206d617572697320636f6e67756520736f6c6c696369747564696e2e20566573746962756c756d20616e746520697073756d207072696d697320696e206661756369627573206f726369206c756374757320657420756c74726963657320706f737565726520637562696c69612043757261653b2053757370656e646973736520636f6e76616c6c69732073656d2076656c206d617373612066617563696275732c2065676574206c6163696e6961206c616375732074656d706f722e204e756c6c61207175697320756c747269636965732070757275732e2050726f696e20617563746f722072686f6e637573206e69626820636f6e64696d656e74756d206d6f6c6c69732e20416c697175616d20636f6e73657175617420656e696d206174206d65747573206c75637475732c206120656c656966656e6420707572757320656765737461732e20437572616269747572206174206e696268206d657475732e204e616d20626962656e64756d2c206e6571756520617420617563746f72207472697374697175652c206c6f72656d206c696265726f20616c697175657420617263752c206e6f6e20696e74657264756d2074656c6c7573206c65637475732073697420616d65742065726f732e20437261732072686f6e6375732c206d65747573206163206f726e617265206375727375732c20646f6c6f72206a7573746f20756c747269636573206d657475732c20617420756c6c616d636f7270657220766f6c7574706174"
	},
	"zero": {
		"in": new Uint8Array(0),
		"out": "0x80"
	},
	"smallint": {
		"in": unsignedBigintToUint8Array(1n, 8),
		"out": "0x01"
	},
	"smallint2": {
		"in": unsignedBigintToUint8Array(16n, 8),
		"out": "0x10"
	},
	"smallint3": {
		"in": unsignedBigintToUint8Array(79n, 8),
		"out": "0x4f"
	},
	"smallint4": {
		"in": unsignedBigintToUint8Array(127n, 8),
		"out": "0x7f"
	},
	"mediumint1": {
		"in": unsignedBigintToUint8Array(128n, 8),
		"out": "0x8180"
	},
	"mediumint2": {
		"in": unsignedBigintToUint8Array(1000n, 16),
		"out": "0x8203e8"
	},
	"mediumint3": {
		"in": unsignedBigintToUint8Array(100000n, 24),
		"out": "0x830186a0"
	},
	"mediumint4": {
		"in": unsignedBigintToUint8Array(83729609699884896815286331701780722n, 120),
		"out": "0x8f102030405060708090a0b0c0d0e0f2"
	},
	"mediumint5": {
		"in": unsignedBigintToUint8Array(105315505618206987246253880190783558935785933862974822347068935681n, 224),
		"out": "0x9c0100020003000400050006000700080009000a000b000c000d000e01"
	},
	"emptylist": {
		"in": [],
		"out": "0xc0"
	},
	"stringlist": {
		"in": [ new Uint8Array([0x64, 0x6f, 0x67]), new Uint8Array([0x67, 0x6f, 0x64]), new Uint8Array([0x63, 0x61, 0x74]) ],
		"out": "0xcc83646f6783676f6483636174"
	},
	"multilist": {
		"in": [ new Uint8Array([0x7a, 0x77]), [ unsignedBigintToUint8Array(4n, 8) ], unsignedBigintToUint8Array(1n, 8) ],
		"out": "0xc6827a77c10401"
	},
	"shortListMax1": {
		"in": [ new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76]), new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76]), new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76]), new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72])],
		"out": "0xf784617364668471776572847a78637684617364668471776572847a78637684617364668471776572847a78637684617364668471776572"
	},
	"longList1" : {
		"in" : [
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])]
		],
		"out": "0xf840cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376"
	},
	"longList2" : {
		"in" : [
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])],
			[new Uint8Array([0x61, 0x73, 0x64, 0x66]), new Uint8Array([0x71, 0x77, 0x65, 0x72]), new Uint8Array([0x7a, 0x78, 0x63, 0x76])]
		],
		"out": "0xf90200cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376cf84617364668471776572847a786376"
	},
	"listsoflists": {
		"in": [ [ [], [] ], [] ],
		"out": "0xc4c2c0c0c0"
	},
	"listsoflists2": {
		"in": [ [], [[]], [ [], [[]] ] ],
		"out": "0xc7c0c1c0c3c0c1c0"
	},
	"dictTest1" : {
		"in" : [
			[new Uint8Array([0x6b, 0x65, 0x79, 0x31]), new Uint8Array([0x76, 0x61, 0x6c, 0x31])],
			[new Uint8Array([0x6b, 0x65, 0x79, 0x32]), new Uint8Array([0x76, 0x61, 0x6c, 0x32])],
			[new Uint8Array([0x6b, 0x65, 0x79, 0x33]), new Uint8Array([0x76, 0x61, 0x6c, 0x33])],
			[new Uint8Array([0x6b, 0x65, 0x79, 0x34]), new Uint8Array([0x76, 0x61, 0x6c, 0x34])]
		],
		"out" : "0xecca846b6579318476616c31ca846b6579328476616c32ca846b6579338476616c33ca846b6579348476616c34"
	},
	"bigint": {
		"in": unsignedBigintToUint8Array(115792089237316195423570985008687907853269984665640564039457584007913129639936n, 264),
		"out": "0xa1010000000000000000000000000000000000000000000000000000000000000000"
	}
}

for (let testCaseName in testCases) {
	console.log(testCaseName)
	const input = testCases[testCaseName].in
	const output = testCases[testCaseName].out
	const expected = hexStringToUint8Array(output)
	const actual = rlpEncode(input)
	expect(expected).to.equalBytes(actual)
}
console.log('done')

type InputItem = string | number | InputItemArray
interface InputItemArray extends Array<InputItem> { }

function hexStringToUint8Array(hex: string): Uint8Array {
	const match = new RegExp(`^(?:0x)?([a-fA-F0-9]*)$`).exec(hex)
	if (match === null) throw new Error(`Expected a hex string encoded byte array with an optional '0x' prefix but received ${hex}`)
	if (match.length % 2) throw new Error(`Hex string encoded byte array must be an even number of charcaters long.`)
	const normalized = match[1]
	const byteLength = normalized.length / 2
	const bytes = new Uint8Array(byteLength)
	for (let i = 0; i < byteLength; ++i) {
		bytes[i] = (Number.parseInt(`${normalized[i*2]}${normalized[i*2+1]}`, 16))
	}
	return bytes
}
