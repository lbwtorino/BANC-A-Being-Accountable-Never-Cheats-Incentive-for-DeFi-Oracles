import { EncodableArray } from '@zoltu/ethereum-abi-encoder';
import { FetchJsonRpc } from '@zoltu/ethereum-fetch-json-rpc';
export { FetchJsonRpc };
export declare class FetchDependencies implements Dependencies {
    readonly rpc: FetchJsonRpc;
    constructor(rpc: FetchJsonRpc);
    readonly call: (to: bigint, methodSignature: string, parameters: EncodableArray, value: bigint) => Promise<Uint8Array>;
    readonly submitTransaction: (to: bigint, methodSignature: string, parameters: EncodableArray, value: bigint) => Promise<TransactionReceipt>;
}
export interface Log {
    readonly topics: ReadonlyArray<bigint>;
    readonly data: Uint8Array;
}
export interface TransactionReceipt {
    readonly status: boolean;
    readonly logs: Iterable<Log>;
}
export interface Dependencies {
    call(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<Uint8Array>;
    submitTransaction(address: bigint, methodSignature: string, methodParameters: EncodableArray, value: bigint): Promise<TransactionReceipt>;
}
//# sourceMappingURL=index.d.ts.map