"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asn1 = require("asn1js");
exports.AsnAnyConverter = {
    fromASN: (value) => value instanceof asn1.Null ? null : value.valueBeforeDecode,
    toASN: (value) => {
        if (value === null) {
            return new asn1.Null();
        }
        const schema = asn1.fromBER(value);
        if (schema.result.error) {
            throw new Error(schema.result.error);
        }
        return schema.result;
    },
};
exports.AsnIntegerConverter = {
    fromASN: (value) => !value.valueBlock.valueDec && value.valueBlock.valueHex.byteLength > 0 ?
        value.valueBlock.toString()
        : value.valueBlock.valueDec,
    toASN: (value) => new asn1.Integer({ value: value }),
};
exports.AsnEnumeratedConverter = {
    fromASN: (value) => value.valueBlock.valueDec,
    toASN: (value) => new asn1.Enumerated({ value }),
};
exports.AsnIntegerArrayBufferConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.Integer({ valueHex: value }),
};
exports.AsnBitStringConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.BitString({ valueHex: value }),
};
exports.AsnObjectIdentifierConverter = {
    fromASN: (value) => value.valueBlock.toString(),
    toASN: (value) => new asn1.ObjectIdentifier({ value }),
};
exports.AsnBooleanConverter = {
    fromASN: (value) => value.valueBlock.value,
    toASN: (value) => new asn1.Boolean({ value }),
};
exports.AsnOctetStringConverter = {
    fromASN: (value) => value.valueBlock.valueHex,
    toASN: (value) => new asn1.OctetString({ valueHex: value }),
};
function createStringConverter(Asn1Type) {
    return {
        fromASN: (value) => value.valueBlock.value,
        toASN: (value) => new Asn1Type({ value }),
    };
}
exports.AsnUtf8StringConverter = createStringConverter(asn1.Utf8String);
exports.AsnBmpStringConverter = createStringConverter(asn1.BmpString);
exports.AsnUniversalStringConverter = createStringConverter(asn1.UniversalString);
exports.AsnNumericStringConverter = createStringConverter(asn1.NumericString);
exports.AsnPrintableStringConverter = createStringConverter(asn1.PrintableString);
exports.AsnTeletexStringConverter = createStringConverter(asn1.TeletexString);
exports.AsnVideotexStringConverter = createStringConverter(asn1.VideotexString);
exports.AsnIA5StringConverter = createStringConverter(asn1.IA5String);
exports.AsnGraphicStringConverter = createStringConverter(asn1.GraphicString);
exports.AsnVisibleStringConverter = createStringConverter(asn1.VisibleString);
exports.AsnGeneralStringConverter = createStringConverter(asn1.GeneralString);
exports.AsnCharacterStringConverter = createStringConverter(asn1.CharacterString);
exports.AsnUTCTimeConverter = {
    fromASN: (value) => value.toDate(),
    toASN: (value) => new asn1.UTCTime({ valueDate: value }),
};
exports.AsnGeneralizedTimeConverter = {
    fromASN: (value) => value.toDate(),
    toASN: (value) => new asn1.GeneralizedTime({ valueDate: value }),
};
exports.AsnNullConverter = {
    fromASN: (value) => null,
    toASN: (value) => {
        return new asn1.Null();
    },
};
