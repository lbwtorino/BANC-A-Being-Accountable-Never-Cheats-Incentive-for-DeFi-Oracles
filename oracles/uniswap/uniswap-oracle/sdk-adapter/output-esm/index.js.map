{"version":3,"file":"index.js","sourceRoot":"","sources":["../source/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as OracleSdk from '@keydonix/uniswap-oracle-sdk'\n\ntype JsonRpcObject = { jsonrpc: '2.0', id: number | string | null, method: string, params?: unknown[] | object }\ntype EthersProvider = { send: (method: string, params?: unknown[] | object) => Promise<unknown> }\ntype SendAsyncProvider = { sendAsync: (request: JsonRpcObject, callback: (error: unknown, result: unknown) => void) => Promise<unknown> }\ntype RequestProvider = { request: (method: string, params?: unknown[] | object) => Promise<unknown> }\ntype Provider = SendAsyncProvider | RequestProvider | EthersProvider\n\nexport function getBlockByNumberFactory(provider: Provider): OracleSdk.EthGetBlockByNumber {\n\tconst requestProvider = normalizeProvider(provider)\n\treturn async (blockNumber: bigint | 'latest') => {\n\t\tconst stringifiedBlockNumber = typeof blockNumber === 'bigint' ? `0x${blockNumber.toString(16)}` : blockNumber\n\t\tconst block = await requestProvider.request('eth_getBlockByNumber', [stringifiedBlockNumber, false])\n\t\tassertPlainObject(block)\n\t\tassertProperty(block, 'parentHash', 'string')\n\t\tassertProperty(block, 'sha3Uncles', 'string')\n\t\tassertProperty(block, 'miner', 'string')\n\t\tassertProperty(block, 'stateRoot', 'string')\n\t\tassertProperty(block, 'transactionsRoot', 'string')\n\t\tassertProperty(block, 'receiptsRoot', 'string')\n\t\tassertProperty(block, 'logsBloom', 'string')\n\t\tassertProperty(block, 'difficulty', 'string')\n\t\tassertProperty(block, 'number', 'string')\n\t\tassertProperty(block, 'gasLimit', 'string')\n\t\tassertProperty(block, 'gasUsed', 'string')\n\t\tassertProperty(block, 'timestamp', 'string')\n\t\tassertProperty(block, 'extraData', 'string')\n\t\tassertProperty(block, 'mixHash', 'string')\n\t\tassertProperty(block, 'nonce', 'string')\n\t\treturn {\n\t\t\tparentHash: stringToBigint(block.parentHash),\n\t\t\tsha3Uncles: stringToBigint(block.sha3Uncles),\n\t\t\tminer: stringToBigint(block.miner),\n\t\t\tstateRoot: stringToBigint(block.stateRoot),\n\t\t\ttransactionsRoot: stringToBigint(block.transactionsRoot),\n\t\t\treceiptsRoot: stringToBigint(block.receiptsRoot),\n\t\t\tlogsBloom: stringToBigint(block.logsBloom),\n\t\t\tdifficulty: stringToBigint(block.difficulty),\n\t\t\tnumber: stringToBigint(block.number),\n\t\t\tgasLimit: stringToBigint(block.gasLimit),\n\t\t\tgasUsed: stringToBigint(block.gasUsed),\n\t\t\ttimestamp: stringToBigint(block.timestamp),\n\t\t\textraData: stringToByteArray(block.extraData),\n\t\t\tmixHash: stringToBigint(block.mixHash),\n\t\t\tnonce: stringToBigint(block.nonce),\n\t\t}\n\t}\n}\n\nexport function getStorageAtFactory(provider: Provider): OracleSdk.EthGetStorageAt {\n\tconst requestProvider = normalizeProvider(provider)\n\treturn async (address: bigint, position: bigint, block: bigint | 'latest') => {\n\t\tconst encodedAddress = bigintToHexAddress(address)\n\t\tconst encodedPosition = bigintToHexQuantity(position)\n\t\tconst encodedBlockTag = block === 'latest' ? 'latest' : bigintToHexQuantity(block)\n\t\tconst result = await requestProvider.request('eth_getStorageAt', [encodedAddress, encodedPosition, encodedBlockTag])\n\t\tif (typeof result !== 'string') throw new Error(`Expected eth_getStorageAt to return a string but instead returned a ${typeof result}`)\n\t\treturn stringToBigint(result)\n\t}\n}\n\nexport function getProofFactory(provider: Provider): OracleSdk.EthGetProof {\n\tconst requestProvider = normalizeProvider(provider)\n\treturn async (address: bigint, positions: readonly bigint[], block: bigint) => {\n\t\tconst encodedAddress = bigintToHexAddress(address)\n\t\tconst encodedPositions = positions.map(bigintToHexQuantity)\n\t\tconst encodedBlockTag = bigintToHexQuantity(block)\n\t\tconst result = await requestProvider.request('eth_getProof', [encodedAddress, encodedPositions, encodedBlockTag])\n\t\tassertPlainObject(result)\n\t\tassertProperty(result, 'accountProof', 'array')\n\t\tassertProperty(result, 'storageProof', 'array')\n\t\tconst accountProof = result.accountProof.map(entry => {\n\t\t\tassertType(entry, 'string')\n\t\t\treturn stringToByteArray(entry)\n\t\t})\n\t\tconst storageProof = result.storageProof.map(entry => {\n\t\t\tassertPlainObject(entry)\n\t\t\tassertProperty(entry, 'key', 'string')\n\t\t\tassertProperty(entry, 'value', 'string')\n\t\t\tassertProperty(entry, 'proof', 'array')\n\t\t\treturn {\n\t\t\t\tkey: stringToBigint(entry.key),\n\t\t\t\tvalue: stringToBigint(entry.key),\n\t\t\t\tproof: entry.proof.map(proofEntry => {\n\t\t\t\t\tassertType(proofEntry, 'string')\n\t\t\t\t\treturn stringToByteArray(proofEntry)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\treturn { accountProof, storageProof }\n\t}\n}\n\nfunction normalizeProvider(provider: Provider): RequestProvider {\n\tif ('request' in provider) {\n\t\treturn provider\n\t} else if('sendAsync' in provider) {\n\t\treturn {\n\t\t\trequest: async (method: string, params?: unknown[] | object) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tprovider.sendAsync({ jsonrpc: '2.0', id: 1, method, params }, (error, response) => {\n\t\t\t\t\t\tif (error !== null && error !== undefined) return reject(unknownErrorToJsonRpcError(error, { request: { method, params } }))\n\t\t\t\t\t\tif (!isJsonRpcLike(response)) return reject(new JsonRpcError(-32000, `Received something other than a JSON-RPC response from provider.sendAsync.`, { request: { method, params }, response}))\n\t\t\t\t\t\tif ('error' in response) return reject(new JsonRpcError(response.error.code, response.error.message, response.error.data))\n\t\t\t\t\t\treturn resolve(response.result)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t} else if ('send' in provider) {\n\t\treturn {\n\t\t\trequest: async (method, params) => provider.send(method, params)\n\t\t}\n\t} else {\n\t\tthrow new Error(`expected an object with a 'request', 'sendAsync' or 'send' method on it but received ${JSON.stringify(provider)}`)\n\t}\n}\n\nexport class JsonRpcError extends Error {\n\tconstructor(public readonly code: number, message: string, public readonly data?: unknown) {\n\t\tsuper(message)\n\t\t// https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\t\tObject.setPrototypeOf(this, JsonRpcError.prototype)\n\t}\n}\n\nfunction unknownErrorToJsonRpcError(error: unknown, extraData: object) {\n\tif (error instanceof Error) {\n\t\t// sketchy, but probably fine\n\t\tconst mutableError = error as unknown as Record<'code' | 'data', unknown>\n\t\tmutableError.code = mutableError.code || -32603\n\t\tmutableError.data = mutableError.data || extraData\n\t\tif (isPlainObject(mutableError.data)) mergeIn(mutableError.data, extraData)\n\t\treturn error\n\t}\n\t// if someone threw something besides an Error, wrap it up in an error\n\treturn new JsonRpcError(-32603, `Unexpected thrown value.`, mergeIn({ error }, extraData))\n}\n\n\nfunction mergeIn(target: object, source: object) {\n\tfor (const key in source) {\n\t\tconst targetValue = (target as any)[key] as unknown\n\t\tconst sourceValue = (source as any)[key] as unknown\n\t\tif (targetValue === undefined || targetValue === null) {\n\t\t\t;(target as any)[key] = sourceValue\n\t\t} else if (isPlainObject(targetValue) && isPlainObject(sourceValue)) {\n\t\t\tmergeIn(targetValue, sourceValue)\n\t\t} else {\n\t\t\t// drop source[key], don't want to override the target value\n\t\t}\n\t}\n\treturn target\n}\n\nfunction isPlainObject(maybe: unknown): maybe is object {\n\tif (typeof maybe !== 'object') return false\n\tif (maybe === null) return false\n\tif (Array.isArray(maybe)) return false\n\t// classes can get complicated so don't try to merge them.  What does it mean to merge two Promises or two Dates?\n\tif (Object.getPrototypeOf(maybe) !== Object.prototype) return false\n\treturn true\n}\n\nfunction assertPlainObject(maybe: unknown): asserts maybe is {} {\n\tif (typeof maybe !== 'object') throw new Error(`Expected an object but received a ${typeof maybe}`)\n\tif (maybe === null) throw new Error(`Expected an object but received null.`)\n\tif (Array.isArray(maybe)) throw new Error(`Expected an object but received an array.`)\n\tif (Object.getPrototypeOf(maybe) !== Object.prototype) throw new Error(`Expected a plain object, but received a class instance.`)\n}\n\n\ntype TypeMapping = { 'string': string, 'object': {}, 'array': unknown[] }\nfunction assertType<V extends 'string' | 'object' | 'array'>(maybe: unknown, expectedPropertyType: V): asserts maybe is TypeMapping[V] {\n\tif (expectedPropertyType === 'string' && typeof maybe === 'string') return\n\tif (expectedPropertyType === 'array' && Array.isArray(maybe)) return\n\tif (expectedPropertyType === 'object' && typeof maybe === 'object' && maybe !== null && !Array.isArray(maybe)) return\n\tthrow new Error(`Value is of type ${typeof maybe} instead of expected type ${expectedPropertyType}`)\n}\nfunction assertProperty<T extends {}, K extends string, V extends 'string' | 'object' | 'array'>(maybe: T, propertyName: K, expectedPropertyType: V): asserts maybe is T & { [Key in K]: TypeMapping[V] } {\n\tif (!(propertyName in maybe)) throw new Error(`Object does not contain a ${propertyName} property.`)\n\tconst propertyValue = (maybe as any)[propertyName] as unknown\n\t// CONSIDER: DRY with `assertType`\n\tif (expectedPropertyType === 'string' && typeof propertyValue === 'string') return\n\tif (expectedPropertyType === 'array' && Array.isArray(propertyValue)) return\n\tif (expectedPropertyType === 'object' && typeof propertyValue === 'object' && propertyValue !== null && !Array.isArray(propertyValue)) return\n\tthrow new Error(`Object.${propertyName} is of type ${typeof propertyValue} instead of expected type ${expectedPropertyType}`)\n}\n\nfunction isJsonRpcLike(maybe: unknown): maybe is { result: unknown } | { error: { code: number, message: string, data?: unknown }} {\n\tif (typeof maybe !== 'object') return false\n\tif (maybe === null) return false\n\tif ('error' in maybe) {\n\t\tif (!('code' in maybe)) return false\n\t\tif (typeof (maybe as any).code !== 'number') return false\n\t\tif (!('message' in maybe)) return false\n\t\tif (typeof (maybe as any).message !== 'string') return false\n\t\treturn true\n\t}\n\tif ('result' in maybe) return true\n\treturn false\n}\n\nfunction stringToBigint(hex: string): bigint {\n\tconst match = /^(?:0x)?([a-fA-F0-9]*)$/.exec(hex)\n\tif (match === null) throw new Error(`Expected a hex string encoded number with an optional '0x' prefix but received ${hex}`)\n\tconst normalized = match[1]\n\treturn BigInt(`0x${normalized}`)\n}\n\nfunction stringToByteArray(hex: string): Uint8Array {\n\tconst match = /^(?:0x)?([a-fA-F0-9]*)$/.exec(hex)\n\tif (match === null) throw new Error(`Expected a hex string encoded byte array with an optional '0x' prefix but received ${hex}`)\n\tconst normalized = match[1]\n\tif (normalized.length % 2) throw new Error(`Hex string encoded byte array must be an even number of charcaters long.`)\n\tconst bytes = []\n\tfor (let i = 0; i < normalized.length; i += 2) {\n\t\tbytes.push(Number.parseInt(`${normalized[i]}${normalized[i + 1]}`, 16))\n\t}\n\treturn new Uint8Array(bytes)\n}\n\nfunction bigintToHexAddress(value: bigint): string {\n\treturn `0x${value.toString(16).padStart(40, '0')}`\n}\n\nfunction bigintToHexQuantity(value: bigint): string {\n\treturn `0x${value.toString(16)}`\n}\n"]}